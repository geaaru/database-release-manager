#!/bin/bash
#------------------------------------------------
# Author(s): Geaaru, geaaru@gmail.com
# $Id$
# License: GPL 2.0
#------------------------------------------------

name="logfile"
logfile_authors="Geaaru"
logfile_creation_date="May 6, 2013"
logfile_version="@PACKAGE_VERSION@"
logfile_status="0"

# logfile_logfile_version
logfile_version () {
   echo -en "Version: ${logfile_version}\n"
   return 0
}
# logfile_logfile_version_end

# logfile_logfile_long_help
logfile_long_help () {

   echo -en "===========================================================================\n"
   echo -en "Module [logfile]:\n"
   echo -en "Author(s): ${logfile_authors}\n"
   echo -en "Created: ${logfile_creation_date}\n"
   echo -en "Version: ${logfile_version}\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\tinfo                    Show logfile module status.\n"
   echo -en "\treset                   Remove logfile.\n"
   echo -en "\twrite [msg]             Write a message to log file.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
# logfile_logfile_long_help_end

# logfile_logfile_show_help
logfile_show_help () {

   echo -en "===========================================================================\n"
   echo -en "Module [logfile]:\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\tinfo                    Show logfile module status.\n"
   echo -en "\treset                   Remove logfile.\n"
   echo -en "\twrite [msg]             Write a message to log file.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
# logfile_logfile_show_help_end

# logfile_logfile_info
logfile_info () {

   echo -en "===========================================================================\n"
   echo -en "Module [logfile]:\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "Logfile = $LOGFILE\n"
   echo -en "Status  = $logfile_status\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

}
# logfile_logfile_info_end

# logfile_logfile_write
logfile_write () {

  local result=0

  # Shift first two input param
  shift 2

  local msg=$1

  _logfile_write "$msg" || $result=1

  return $result
}
# logfile_logfile_write_end

# logfile_logfile_reset
logfile_reset () {

  local res=0

  if [ x$logfile_status == x"1" ] ; then

    confirmation_question "Are you sure to remove file $LOGFILE ? [y/N]"
    res=$?

    if [ $res -eq 0 ] ; then
      rm $LOGFILE || error_handled "Error on remove file $LOGFILE"
      echo -en "File $LOGFILE removed correctly.\n"
    else
      res=1
    fi

  else

    echo -en "Logging is not enable. I do nothing.\n"
    res=1

  fi

  return $res
}
# logfile_logfile_reset_end

##################################################################
# Internal functions
##################################################################

# logfile__logfile_write
_logfile_write () {

  local msg=$1

  local d=`date +%Y%m%d-%H:%M:%S`

  if [ x$logfile_status != x"1" ] ; then
    # Logging not enable
    return 0
  fi

  echo -en "------------------------------------------------------\n" >> $LOGFILE || return 1
  echo -en "$d - $msg\n" >> $LOGFILE || return 1
  echo -en "------------------------------------------------------\n" >> $LOGFILE || return 1

  if [ -n "$DBRM_VERBOSE" ] ; then
    echo -en "------------------------------------------------------\n"
    echo -en "$d - $msg\n"
    echo -en "------------------------------------------------------\n"
  fi

  return 0

}
# logfile__logfile_write_end

# logfile__logfile_init
_logfile_init () {

  if [ -z "$LOGFILE" ] ; then
    logfile_status="0"
  else

    # Check if file is writable
    touch $LOGFILE || error_handled "Error on access to $LOGFILE"

    logfile_status="1"

  fi
}
# logfile__logfile_init_end

# vim: syn=sh filetype=sh ts=2 sw=2
