#!/bin/bash
#------------------------------------------------
# Author(s): Geaaru, geaaru@gmail.com
# $Id$
# License: GPL 2.0
#------------------------------------------------

name="oracle"
oracle_authors="Geaaru"
oracle_creation_date="May 6, 2013"
oracle_version="@PACKAGE_VERSION@"
oracle_status="0"

# Directory with custom oracle generation scripts
_oracle_scripts=@SHAREDIR@/oracle/

#****f* oracle/oracle_version
# FUNCTION
#  Show version of oracle module.
# SOURCE
oracle_version() {
  echo -en "Version: ${oracle_version}\n"
  return 0
}
#***

#****f* oracle/oracle_long_help
# FUNCTION
#   Show long help message.
# SOURCE
oracle_long_help () {

   echo -en "===========================================================================\n"
   echo -en "Module [oracle]:\n"
   echo -en "Author(s): ${oracle_authors}\n"
   echo -en "Created: ${oracle_creation_date}\n"
   echo -en "Version: ${oracle_version}\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\ttest_connection         Test connection versus database.\n"
   echo -en "\tdownload                Download packages/triggers/views/etc.\n"
   echo -en "\tcompile                 Compile packages/triggers/views/etc.\n"
   echo -en "\tshell                   Enter on sqlplus shell of current configuration.\n"
   echo -en "\tquery                   Execute directly a query on current database.\n"
   echo -en "\tinitenv                 Create default directories if not present.\n"
   echo -en "\tshow                    Retrieve database informations.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
#***

#****f* oracle/oracle_show_help
# FUNCTION
#   Show help message.
# SOURCE
oracle_show_help () {
   echo -en "===========================================================================\n"
   echo -en "Module [oracle]:\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\ttest_connection         Test connection versus database.\n"
   echo -en "\tdownload                Download packages/triggers/views/etc.\n"
   echo -en "\tcompile                 Compile packages/triggers/views/etc.\n"
   echo -en "\tshell                   Enter on sqlplus shell of current configuration.\n"
   echo -en "\tquery                   Execute directly a query on current database.\n"
   echo -en "\tinitenv                 Create default directories if not present.\n"
   echo -en "\tshow                    Retrieve database informations.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
#***


# oracle_oracle_initenv
oracle_initenv () {

  _oracle_initenv_help () {
    echo -en "[--to-current-dir]      Initialize current directory [.].\n"
    echo -en "[--to-dir target]       Initialize target directory.\n"
    echo -en "[--help|-h]             Show help message.\n"
    echo -en "\n"

    return 0
  }

  _oracle_initenv_args () {

    local short_options="h"
    local long_options="to-dir: help to-current-dir"

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_initenv_args [$#]: $@)\n"

    if [ $# -eq 0 ] ; then
      _oracle_initenv_help
      return 1
    fi

    $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
      error_handled "Invalid parameters"

    ORACLE_INIT_CURRDIR=0
    ORACLE_INIT_DIR=""
    ORACLE_INIT_TARGETDIR=0

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_initenv_args [$#]: $@)\n"
    while [ $# -gt 0 ] ; do
      case "$1" in

        --to-current-dir)
          ORACLE_INIT_CURRDIR=1
          ;;
        --to-dir)
          ORACLE_INIT_TARGETDIR=1
          ORACLE_INIT_DIR="$2"
          shift
          ;;
        --enable-profiles)
          ORACLE_INIT_PROFILES=1
          ;;
        -h|--help)
          _oracle_initenv_help
          return 1
          ;;
        --)
          error_generate "Invalid parameter."
          ;;
        *)
          error_generate "Invalid parameter $1."
          ;;
      esac
      shift

    done

    if [[ $ORACLE_INIT_CURRDIR -eq 1 && $ORACLE_INIT_TARGETDIR -eq 1 ]] ; then
      out_handler_print "Use only --to-dir or --to-current-dir option."
      return 1
    fi

    if [[ $ORACLE_INIT_TARGETDIR -eq 1 ]] ; then
      if [ ! -d $ORACLE_INIT_DIR ] ; then
        out_handler_print "Invalid directory $DBM_INIT_DIR."
        return 1
      fi
    else

      # Set ORACLE_INIT_DIR to .
      ORACLE_INIT_DIR=.
    fi

    return 0
  }

  local result=1
  local ndirs=0
  local directories="
    creation_scripts
    functions
    packages
    procedures
    triggers
    schemas
    update_scripts
    views
    synonims
    jobs
    schedulers
  "

  # Shift first tow input param
  shift 2

  _oracle_initenv_args "$@" || error_handled ""

  unset -f _oracle_initenv_args
  unset -f _oracle_initenv_help

  for d in $directories ; do

    # Check if foreign key directory
    if [[ ! -d ${ORACLE_INIT_DIR}/$d ]] ; then
      mkdir -p ${ORACLE_INIT_DIR}/$d || error_generate "Error on create directory $d."
      let ndirs++
    fi

  done

  out_handler_print "Directories created: ${ndirs}."

  return 0
}
# oracle_oracle_initenv_end

# oracle_oracle_show
oracle_show () {

  _oracle_show_help () {
    echo -en "[--tables]              List of tables.\n"
    echo -en "[--indexes]             List of indexes.\n"
    echo -en "[--index]               Show detail of a specific index. Could be used multiple time.\n"
    echo -en "[--invalid]             Filter invalid indexes.\n"
    echo -en "[--tablespace [value]]  Filter for table space name (Use REGEXP_LIKE).\n"
    echo -en "[--filter [value]]      Define filter for table name (Use REGEXP_LIKE).\n"
    echo -en "\n"

    return 0
  }

  _oracle_show_args () {

    local short_options="h"
    local long_options="tables filter: indexes index: invalid tablespace:"

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_show_args [$#]: $@)\n"

    if [ $# -eq 0 ] ; then
      _oracle_show_help
      return 1
    fi

    $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
      error_handled "Invalid parameters"

    ORACLE_SHOW_TABLES=0
    ORACLE_SHOW_INDEXES=0
    ORACLE_SHOW_INDEX=""
    ORACLE_SHOW_INDEX_NUM=0
    ORACLE_SHOW_FILTER=""
    ORACLE_SHOW_INVALID=1
    ORACLE_SHOW_TABLESPACE=""

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_show_args [$#]: $@)\n"
    while [ $# -gt 0 ] ; do
      case "$1" in

        --tables)
          ORACLE_SHOW_TABLES=1
          ;;
        --indexes)
          ORACLE_SHOW_INDEXES=1
          ;;
        --filter)
          ORACLE_SHOW_FILTER="$2"
          shift
          ;;
        --index)
          ORACLE_SHOW_INDEX[${ORACLE_SHOW_INDEX_NUM}]=$2
          let ORACLE_SHOW_INDEX_NUM++
          shift
          ;;
        --tablespace)
          ORACLE_SHOW_TABLESPACE=$2
          shift
          ;;
        --invalid)
          ORACLE_SHOW_INVALID=1
          ;;
        -h|--help)
          _oracle_show_help
          return 1
          ;;
        --)
          error_generate "Invalid parameter."
          ;;
        *)
          error_generate "Invalid parameter $1."
          ;;
      esac
      shift

    done

    return 0
  }

  # Shift first tow input param
  shift 2

  _oracle_show_args "$@" || error_handled ""

  _oracle_check_status

  _oracle_help_message="do_help"

  _oracle_connections_args "$@"

  unset -f _oracle_show_args
  unset -f _oracle_show_help

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  if [ $ORACLE_SHOW_TABLES -eq 1 ] ; then
    _oracle_show_tables
  fi

  if [ $ORACLE_SHOW_INDEXES -eq 1 ] ; then
    _oracle_show_indexes
  fi

  if [ $ORACLE_SHOW_INDEX_NUM -gt 0 ] ; then
    local i=0
    for i in ${!ORACLE_SHOW_INDEX[@]} ; do
      _oracle_show_index "${ORACLE_SHOW_INDEX[${i}]}"
    done
  fi

  return 0
}
# oracle_oracle_show_end

#****f* oracle/oracle_test_connection
# FUNCTION
#   Test connection to oracle server and schema.
# SEE ALSO
#   _oracle_connections_args
# SOURCE
oracle_test_connection () {

  local result=1

  # Shift first two input param
  shift 2

  _oracle_check_status

  _oracle_help_message="print_help"

  _oracle_connections_args "$@" || error_handled ""

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  echo -en "Connected to $ORACLE_SID with user $ORACLE_USER correctly.\n"

  return 0
}
#***

#****f* oracle/oracle_compile
# FUNCTION
#   Compile command that permit compilation of triggers, views, function, procedure, packages, etc.
# SEE ALSO
#   _oracle_connections_args
#   _oracle_compile_args
# SOURCE
oracle_compile () {

  local result=1

  # Shift first two input param
  shift 2

  _oracle_check_status

  _oracle_help_message="do_help"

  _oracle_connections_args "$@"

  _oracle_compile_args "$@" || error_handled ""

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  _oracle_compile || error_handled ""

  echo -en "Compile operation successfull.\n"

  return 0
}
#***

#****f* oracle/oracle_download
# FUNCTION
#   Download command that permit download of triggers, views, function, procedure, packages, etc.
# SEE ALSO
#   _oracle_connections_args
#   _oracle_download_args
# SOURCE
oracle_download () {

  local result=1

  # Shift first two input param
  shift 2

  _oracle_check_status

  _oracle_help_message="do_help"

  _oracle_connections_args "$@"

  _oracle_download_args "$@" || error_handled ""

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  _oracle_download || error_handled ""

  echo -en "Download operation successfull.\n"

  return 0
}
#***

#****f* oracle/oracle_shell
# FUNCTION
#   Shell command that permit to enter of sqlplus shell with current active credentials.
# SEE ALSO
#   _oracle_connections_args
oracle_shell () {

  # Shift first two input param
  shift 2

  _oracle_check_status

  _oracle_help_message="do_help"

  _oracle_connections_args "$@" || error_handled ""

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  commons_oracle_shell || error_handled "Exit value $?."

  return 0
}
#***

#****f* oracle/oracle_query
# FUNCTION
#   Execute directly a query to database.
# SEE ALSO
#   _oracle_connections_args
oracle_query () {

  # Shift first two input params
  shift 2

  _oracle_check_status

  _oracle_help_message="do_help"

  _oracle_connections_args "$@"

  _oracle_query_args "$@" || error_handled ""

  commons_oracle_check_vars

  sqlplus_set_sqlplus_auth_var "$ORACLE_SID" "$ORACLE_USER" "$ORACLE_PWD" "$ORACLE_ROLE"

  commons_oracle_check_connection || error_handled "SQLPlus was unable to connect the DB with the supplied credentials"

  _oracle_query || error_handled ""

  return 0
}
#***


##################################################################
# Internal functions
##################################################################

#****f* oracle/_oracle_init
# FUNCTION
#   Internal function called on initialization of the oracle module.
# DESCRIPTION
#   Oracle module is usable when SQLCA variable contains oracle string.
#   So, if oracle module is enabled then these check are done:
#   * verify presence of sqlplus client program
#   * check if ORACLE_USER variable is set. This variable define user to use
#     on connection to database.
#   * check if ORACLE_PWD variable is set. This variable define password to use
#     on connection to database.
#   * check if defined ORACLE_SID variable. This variable define name of the
#     schema to use on connection.
#   * check if defined ORACLE_DIR variable. This variable define path where
#     save/retrieve files to compile.
#   * check if TNS_ADMIN variable is present and is correct.
# SOURCE
_oracle_init () {

  if [[ ! -z "$SQLCA"  && "$SQLCA" =~ .*oracle.* ]] ; then

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_init: Check requirements of the oracle module.)\n"

    commons_oracle_check_sqlplus || error_handled ""

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_init: All requirements are present. Continue my work.)\n"

    oracle_status="1"

  else

    [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_init: Nothing to do.)\n"

  fi

  return 0
}
#***

#****f* oracle/_oracle_check_status
# FUNCTION
#   Internal function that check if oracle module is enable.
#   Generate an exit with an error message if module is disable.
# SOURCE
_oracle_check_status () {

  if [ x"$oracle_status" = x"0" ] ; then
    error_generate "oracle is not enable. Enable it with SQLCA variable"
  fi

  return 0
}
#***

#****f* oracle/_oracle_connections_args
# FUNCTION
#   Internal function that parse command line arguments relative to
#   connection options.
# DESCRIPTION
#   * -S [SID]        Override SID variable used on connection. If not present
#                     it is used ORACLE_SID variable from configuration file.
#   * -P [pwd]        Override password variable used on connection. If not
#                     present it is used ORACLE_PWD variable from configuration
#                     file.
#   * -U [user]       Override username variable used on connection. If not
#                     present it is used ORACLE_USER variable from configuration file.
#   * -D [dir path]   To define path where save/retrieve files to download/compile.
#                     This option override ORACLE_DIR variable from configuration
#                     file.
#   * -t [tnsname]    Override TNS_ADMIN variable used on connection. If not
#                     present it is used TNS_ADMIN variable from configuration file.
#   * -h              Show help message relative to connection arguments.
# SOURCE
_oracle_connections_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_connections_args args: $@)\n"

  local short_options="S:U:P:hD:t:r:"
  local long_options="help"

  $(set -- $(getopt -u -q -o "$short_options" -- "$@")) || error_handled "Invalid parameters"

  [ $# -lt 1 ] && return 0 # is there at least one param (--)

  while [ $# -gt 0 ] ; do
    case "$1" in

      -S) ORACLE_SID="$2";shift;;
      -P) ORACLE_PWD="$2";shift;;
      -U) ORACLE_USER="$2";shift;;
      -D) ORACLE_DIR="$2";shift;;
      -t) TNS_ADMIN="$2";shift;;
      -r) ORACLE_ROLE="$2";shift;;
      -h|--help)
        if [ -n "$_oracle_help_message" ] ; then
          echo -en "[-S oracle_sid]         Override Oracle SID (or set ORACLE_SID on configuration file).\n"
          echo -en "[-P oracle_pwd]         Override Oracle Password (or set ORACLE_PWD on configuration file).\n"
          echo -en "[-U oracle_user]        Override Oracle schema/user (or set ORACLE_USER on configuration file).\n"
          echo -en "[-r oracle_role]        Override Oracle role (or set ORACLE_ROLE on configuration file).\n"
          echo -en "[-t tnsadmin_path]      Override TNS_ADMIN variable with path of the file tnsnames.ora.\n"
          echo -en "[-D oracle_dir]         Directory where save/retrieve packages/views/functions, etc..\n"
          echo -en "                        (or set ORACLE_DIR on configuration file). \n"
        fi
        return 1
        ;;
      *)
        ;;

    esac

    shift

  done

  return 0
}
#***

#****f* oracle/_oracle_download_args
# FUNCTION
#   Internal function for parse command line argument relative to download command.
# DESCRIPTION
#   * --all-packages      Download all packages.
#   * --all-triggers      Download all triggers.
#   * --all-views         Download all views.
#   * --all-functions     Download all functions.
#   * --all-jobs          Download all jobs.
#   * --all-schedules     Download all schedules.
#   * --all               Download all packages, triggers, view, packages, functions.
#   * --package [p]       Download package p.
#   * --trigger [t]       Download trigger t.
#   * --function [f]      Download function f.
#   * --view [v]          Download view v.
#   * --job [j]           Download job j.
#   * --schedule [s]      Download schedule s.
# SEE ALSO
#   _oracle_connections_args
# SOURCE
_oracle_download_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_download_args args: $@)\n"

  local short_options="S:U:P:hD:t:"
  local long_options="all-packages all-triggers all-functions all-views all-jobs all-schedules all package: trigger: function: view: job: schedule:"
  long_options="$long_options help"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || error_handled "Invalid parameters"

  ORACLE_DOWNLOAD_ALL=1

  if [ $# -lt 1 ] ; then # is there at least one param (--)
    _oracle_download_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_download_args: Found $# params)\n"

  ORACLE_DOWNLOAD_ALL=0
  ORACLE_DOWNLOAD_ALL_PACKAGES=0
  ORACLE_DOWNLOAD_ALL_TRIGGERS=0
  ORACLE_DOWNLOAD_ALL_FUNCTIONS=0
  ORACLE_DOWNLOAD_ALL_VIEWS=0
  ORACLE_DOWNLOAD_ALL_JOBS=0
  ORACLE_DOWNLOAD_ALL_SCHEDULES=0
  ORACLE_DOWNLOAD_ALL_TESTS=0
  ORACLE_DOWNLOAD_PACKAGE=""
  ORACLE_DOWNLOAD_TRIGGER=""
  ORACLE_DOWNLOAD_FUNCTION=""
  ORACLE_DOWNLOAD_VIEW=""
  ORACLE_DOWNLOAD_JOB=""
  ORACLE_DOWNLOAD_SCHEDULE=""
  ORACLE_DOWNLOAD_TEST=""

  while [ $# -gt 0 ] ; do
    case "$1" in

      -S|-U|-P|-D)
        shift
        # do nothing
        ;;

      --all-packages)
        ORACLE_DOWNLOAD_ALL_PACKAGES=1
        ;;
      --all-triggers)
        ORACLE_DOWNLOAD_ALL_TRIGGERS=1
        ;;
      --all-functions)
        ORACLE_DOWNLOAD_ALL_FUNCTIONS=1
        ;;
      --all-views)
        ORACLE_DOWNLOAD_ALL_VIEWS=1
        ;;
      --all-jobs)
        ORACLE_DOWNLOAD_ALL_JOBS=1
        ;;
      --all-schedules)
        ORACLE_DOWNLOAD_ALL_SCHEDULES=1
        ;;
      --all-tests)
        ORACLE_DOWNLOAD_ALL_TESTS=1
        ;;
      --all)
        ORACLE_DOWNLOAD_ALL=1
        ;;
      --package)
        ORACLE_DOWNLOAD_PACKAGE="$2"
        shift
        ;;
      --trigger)
        ORACLE_DOWNLOAD_TRIGGER="$2"
        shift
        ;;
      --function)
        ORACLE_DOWNLOAD_FUNCTION="$2"
        shift
        ;;
      --view)
        ORACLE_DOWNLOAD_VIEW="$2"
        shift
        ;;
      --job)
        ORACLE_DOWNLOAD_JOB="$2"
        shift
        ;;
      --schedule)
        ORACLE_DOWNLOAD_SCHEDULE="$2"
        shift
        ;;
      --test)
        ORACLE_DOWNLOAD_TEST="$2"
        shift
        ;;

      -h|--help)
        _oracle_download_help
        return 1
        ;;
      --)
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;

    esac

    shift
  done

  return 0
}
#***

#****f* oracle/_oracle_download_help
# FUNCTION
#   Print help message of download command.
# SOURCE
_oracle_download_help () {

  echo -en "[--all-packages]        Download all packages.\n"
  echo -en "[--all-triggers]        Download all triggers.\n"
  echo -en "[--all-functions]       Download all functions.\n"
  echo -en "[--all-views]           Download all views.\n"
  echo -en "[--all-jobs]            Download all jobs.\n"
  echo -en "[--all-schedules]       Download all schedules.\n"
  echo -en "[--all-tests]           Download all tests.\n"
  echo -en "[--all]                 Download all.\n"
  echo -en "[--package name]        Download a particular package.\n"
  echo -en "[--trigger name]        Download a particular trigger.\n"
  echo -en "[--function name]       Download a particular function.\n"
  echo -en "[--view name]           Download a particular view.\n"
  echo -en "[--job name]            Download a particular job.\n"
  echo -en "[--schedule name]       Download a particular schedule.\n"
  echo -en "[--test name]           Download a particular test.\n"

  return 0
}
#***

#****f* oracle/_oracle_compile_args
# FUNCTION
#   Internal function for parse command line argument relative to compile command.
# DESCRIPTION
#   * --all-packages      Compile all packages.
#   * --all-triggers      Compile all triggers.
#   * --id-script [id]    Compile script with id.
#   * --file [f]          Compile file f.
#   * --all-functions     Compile all functions.
#   * --all-views         Compile all views.
#   * --all-jobs          Compile all jobs.
#   * --all-schedules     Compile all schedules.
#   * --all-tests         Compile all tests.
#   * --all               Compile all packages, triggers, view, functions.
#   * --package [p]       Compile package p.
#   * --trigger [t]       Compile trigger t.
#   * --function [f]      Compile function f.
#   * --view [v]          Compile view v.
#   * --job [j]           Compile job j.
#   * --schedule [s]      Compile schedule s.
#   * --test [u]          Compile test u.
#   * -h                  Show help message.
# SEE ALSO
#   _oracle_connections_args
# SOURCE
_oracle_compile_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_compile_args args: $@)\n"

  local short_options="S:U:P:hD:t:"
  local long_options="all-packages all-triggers id-script: file: all-functions all-views all-jobs all-schedules all-tests all package: trigger: function: view: job: schedule: test:"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || error_handled "Invalid parameters"

  ORACLE_COMPILE_ALL=1

  if [ $# -lt 1 ] ; then # is there at least one param (--)
    _oracle_compile_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_compile_args: Found $# params)\n"

  ORACLE_COMPILE_ALL=0
  ORACLE_COMPILE_ALL_PACKAGES=0
  ORACLE_COMPILE_ALL_TRIGGERS=0
  ORACLE_COMPILE_ALL_FUNCTIONS=0
  ORACLE_COMPILE_ALL_VIEWS=0
  ORACLE_COMPILE_ALL_JOBS=0
  ORACLE_COMPILE_ALL_SCHEDULES=0
  ORACLE_COMPILE_ALL_TESTS=0
  ORACLE_COMPILE_PACKAGE=""
  ORACLE_COMPILE_TRIGGER=""
  ORACLE_COMPILE_FUNCTION=""
  ORACLE_COMPILE_VIEW=""
  ORACLE_COMPILE_JOB=""
  ORACLE_COMPILE_SCHEDULE=""
  ORACLE_COMPILE_TEST=""
  ORACLE_COMPILE_ID_SCRIPT=""
  ORACLE_COMPILE_FILE=""
  local ORACLE_COMPILE_EXC_RCVD=0

  while [ $# -gt 0 ] ; do
    case "$1" in

      -S|-U|-P|-D)
        shift
        # do nothing
        ;;

      --all-packages)
        ORACLE_COMPILE_ALL_PACKAGES=1
        ;;
      --all-triggers)
        ORACLE_COMPILE_ALL_TRIGGERS=1
        ;;
      --all-functions)
        ORACLE_COMPILE_ALL_FUNCTIONS=1
        ;;
      --all-views)
        ORACLE_COMPILE_ALL_VIEWS=1
        ;;
      --all-jobs)
        ORACLE_COMPILE_ALL_JOBS=1
        ;;
      --all-schedules)
        ORACLE_COMPILE_ALL_SCHEDULES=1
        ;;
      --all-tests)
        ORACLE_COMPILE_ALL_TESTS=1
        ;;
      --all)
        ORACLE_COMPILE_ALL=1
        ;;
      --package)
        ORACLE_COMPILE_PACKAGE="$2"
        shift
        ;;
      --trigger)
        ORACLE_COMPILE_TRIGGER="$2"
        shift
        ;;
      --function)
        ORACLE_COMPILE_FUNCTION="$2"
        shift
        ;;
      --view)
        ORACLE_COMPILE_VIEW="$2"
        shift
        ;;
      --job)
        ORACLE_COMPILE_JOB="$2"
        shift
        ;;
      --schedule)
        ORACLE_COMPILE_SCHEDULE="$2"
        shift
        ;;
      --test)
        ORACLE_COMPILE_TEST="$2"
        shift
        ;;
      --id-script)
        ORACLE_COMPILE_ID_SCRIPT="$2"
        shift
        ;;
      --file)
        ORACLE_COMPILE_FILE="$2"
        shift
        ;;
      --exclude)
        if [ $ORACLE_COMPILE_EXC_RCVD -eq 0 ] ; then
          ORACLE_COMPILE_FILES_EXCLUDED="$2"
          ORACLE_COMPILE_EXC_RCVD=1
        else
          ORACLE_COMPILE_FILES_EXCLUDED="$ORACLE_COMPILE_FILES_EXCLUDED $2"
        fi
        shift
        ;;
      -h|--help)
        _oracle_compile_help
        return 1
        ;;
      --)
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;

    esac

    shift
  done

  return 0
}
#***

#****f* oracle/_oracle_compile_help
# FUNCTION
#   Internal function that print help message relative to compile command.
# SOURCE
_oracle_compile_help () {

  echo -en "[--all-packages]        Compile all packages present under ORACLE_DIR subdirectories.\n"
  echo -en "[--all-triggers]        Compile all triggers present under ORACLE_DIR subdirectories.\n"
  echo -en "[--all-functions]       Compile all functions present under ORACLE_DIR subdirectories.\n"
  echo -en "[--all-views]           Compile all views present on ORACLE_DIR subdirectories.\n"
  echo -en "[--all-jobs]            Compile all jobs present on ORACLE_DIR subdirectories.\n"
  echo -en "[--all-schedules]       Compile all schedules present on ORACLE_DIR subdirectories.\n"
  echo -en "[--all-tests]           Compile all tests present on ORACLE_DIR subdirectories.\n"
  echo -en "[--all]                 Compile all packages, triggers, functions, views, jobs and schedules present under\n"
  echo -en "                        ORACLE_DIR subdirectories.\n"
  echo -en "[--package name]        Compile a particular package under ORACLE_DIR/packages directory.\n"
  echo -en "[--trigger name]        Compile a particular trigger under ORACLE_DIR/triggers directory.\n"
  echo -en "[--function name]       Compile a particular function under ORACLE_DIR/functions directory.\n"
  echo -en "[--view name]           Compile a particular view under ORACLE_DIR/views directory.\n"
  echo -en "[--job name]            Compile a particular job under ORACLE_DIR/jobs directory.\n"
  echo -en "[--schedule name]       Compile a particular schedule under ORACLE_DIR/schedules directory.\n"
  echo -en "[--test name]           Compile a particular test under ORACLE_DIR/tests directory.\n"
  echo -en "[--exclude filename]    Exclude a particular file from compilation.\n"
  echo -en "                        (This option can be repeat and override ORACLE_COMPILE_FILES_EXCLUDED\n"
  echo -en "                         configuration variable).\n"
  echo -en "[--id-script id]        Compile a particular script registered under ORACLE_DIR/<directory>/.\n"
  echo -en "[--file file]           Compile a particular file. (Use ABS Path or relative path from current dir.)\n"
  echo -en "Note: For argument with value if it isn't passed value argument is ignored.\n"

  return 0
}
#***

#****f* oracle/_oracle_compile
# FUNCTION
#   Internal function that manage compilation of SQL statement.
# SEE_ALSO
#   _oracle_compile_id_script
#   commons_oracle_compile_file
#   commons_oracle_compile_all_packages
#   commons_oracle_compile_all_triggers
#   commons_oracle_compile_all_views
#   commons_oracle_compile_all_functions
#   commons_oracle_compile_all_jobs
#   commons_oracle_compile_all_schedules
#   commons_oracle_compile_all_tests
# SOURCE
_oracle_compile () {

  local f=""

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_compile args: $@)\n"

  # Compile script file if available
  if [ ! -z "$ORACLE_COMPILE_ID_SCRIPT" ] ; then

    _oracle_compile_id_script || error_handled ""

    echo -en "Compiled script $ORACLE_COMPILE_ID_SCRIPT with file $DBM_SCRIPT_FILENAME correctly.\n"

  fi

  # Compile single file if available
  if [ ! -z "$ORACLE_COMPILE_FILE" ] ; then

    commons_oracle_compile_file "$ORACLE_COMPILE_FILE" "Compile file $DBM_SCRIPT_FILENAME." || error_handled "Error on compile file $ORACLE_COMPILE_FILE."

  fi


  if [ $ORACLE_COMPILE_ALL -eq 1 ] ; then

    commons_oracle_compile_all_packages "" || error_handled "Error on compile all packages."

    commons_oracle_compile_all_triggers "" || error_handled "Error on compile all triggers."

    commons_oracle_compile_all_functions "" || error_handled "Error on compile all functions."

    commons_oracle_compile_all_views "" || error_handled "Error on compile all views."

    commons_oracle_compile_all_jobs "" || error_handled "Error on compile all jobs."
    
    commons_oracle_compile_all_schedules "" || error_handled "Error on compile all schedules."

    commons_oracle_compile_all_tests"" || error_handled "Error on compile all tests."

  else

    # Check for all-packages or single package

    if [ $ORACLE_COMPILE_ALL_PACKAGES -eq 1 ] ; then

      commons_oracle_compile_all_packages "" || error_handled "Error on compile all packages."

    else

      if [ ! -z "$ORACLE_COMPILE_PACKAGE" ] ; then

        f="${ORACLE_COMPILE_PACKAGE/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/packages/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-triggers or single trigger

    if [ $ORACLE_COMPILE_ALL_TRIGGERS -eq 1 ] ; then

      commons_oracle_compile_all_triggers "" || error_handled "Error on compile all triggers."

    else

      if [ ! -z "$ORACLE_COMPILE_TRIGGER" ] ; then

        f="${ORACLE_COMPILE_TRIGGER/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/triggers/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-functions or single function

    if [ $ORACLE_COMPILE_ALL_FUNCTIONS -eq 1 ] ; then

      commons_oracle_compile_all_functions "" || error_handled "Error on compile all functions."

    else

      if [ ! -z "$ORACLE_COMPILE_FUNCTION" ] ; then

        f="${ORACLE_COMPILE_FUNCTION/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/functions/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-views of single view

    if [ $ORACLE_COMPILE_ALL_VIEWS -eq 1 ] ; then

      commons_oracle_compile_all_views "" || error_handled "Error on compile all views."

    else

      if [ ! -z "$ORACLE_COMPILE_VIEW" ] ; then

        f="${ORACLE_COMPILE_VIEW/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/views/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-jobs of single job

    if [ $ORACLE_COMPILE_ALL_JOBS -eq 1 ] ; then

      commons_oracle_compile_all_jobs "" || error_handled "Error on compile all jobs."

    else

      if [ ! -z "$ORACLE_COMPILE_JOBS" ] ; then

        f="${ORACLE_COMPILE_JOBS/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/jobs/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-schedules of single schedule

    if [ $ORACLE_COMPILE_ALL_SCHEDULES -eq 1 ] ; then

      commons_oracle_compile_all_schedules "" || error_handled "Error on compile all schedules."

    else

      if [ ! -z "$ORACLE_COMPILE_SCHEDULES" ] ; then

        f="${ORACLE_COMPILE_SCHEDULES/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/schedules/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi

    # Check for all-schedules of single test

    if [ $ORACLE_COMPILE_ALL_TESTS -eq 1 ] ; then

      commons_oracle_compile_all_tests "" || error_handled "Error on compile all tests."

    else

      if [ ! -z "$ORACLE_COMPILE_TESTS" ] ; then

        f="${ORACLE_COMPILE_TESTS/.sql/}"
        f=$(basename $f)
        commons_oracle_compile_file "$ORACLE_DIR/tests/$f.sql" "" || error_handled "Error on compile file $f.sql"

      fi

    fi


  fi # end else ORACLE_COMPILE_ALL

  return 0
}
#***

#****f* oracle/_oracle_download
# FUNCTION
#   Internal function relative to downloading process.
# SEE ALSO
#   commons_oracle_download_all_packages
#   commons_oracle_download_all_triggers
#   commons_oracle_download_all_functions
#   commons_oracle_download_all_views
#   commons_oracle_download_all_jobs
#   commons_oracle_download_all_schedules
#   commons_oracle_download_all_tests
#   commons_oracle_download_package
#   commons_oracle_download_trigger
#   commons_oracle_download_function
#   commons_oracle_download_view
#   commons_oracle_download_job
#   commons_oracle_download_schedule
#   commons_oracle_download_test
# SOURCE
_oracle_download () {

  if [ $ORACLE_DOWNLOAD_ALL -eq 1 ] ; then

    commons_oracle_download_all_packages || error_handled "Error on download all packages."

    commons_oracle_download_all_triggers || error_handled "Error on download all triggers."

    commons_oracle_download_all_functions || error_handled "Error on download all functions."

    commons_oracle_download_all_views || error_handled "Error on download all functions."

    commons_oracle_download_all_jobs || error_handled "Error on download all jobs."

    commons_oracle_download_all_schedules || error_handled "Error on download all schedules."

    commons_oracle_download_all_tests || error_handled "Error on download all tests."

  else

    # Check for all-packages or single package

    if [ $ORACLE_DOWNLOAD_ALL_PACKAGES -eq 1 ] ; then

      commons_oracle_download_all_packages || error_handled "Error on download all packages."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_PACKAGE" ] ; then

        commons_oracle_download_package "$ORACLE_DOWNLOAD_PACKAGE" || error_handled "Error on download package $ORACLE_DOWNLOAD_PACKAGE."

      fi

    fi

    # Check for all-triggers or single trigger

    if [ $ORACLE_DOWNLOAD_ALL_TRIGGERS -eq 1 ] ; then

      commons_oracle_download_all_triggers || error_handled "Error on download all triggers."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_TRIGGER" ] ; then

        commons_oracle_download_trigger "$ORACLE_DOWNLOAD_TRIGGER" || error_handled "Error on download trigger $ORACLE_DOWNLOAD_TRIGGER."

      fi

    fi

    # Check for all-functions or single function

    if [ $ORACLE_DOWNLOAD_ALL_FUNCTIONS -eq 1 ] ; then

      commons_oracle_download_all_functions || error_handled "Error on download all functions."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_FUNCTION" ] ; then

        commons_oracle_download_function "$ORACLE_DOWNLOAD_FUNCTION" || error_handled "Error on download function $ORACLE_DOWNLOAD_FUNCTION."

      fi

    fi

    # Check for all-views of single view

    if [ $ORACLE_DOWNLOAD_ALL_VIEWS -eq 1 ] ; then

      commons_oracle_download_all_views || error_handled "Error on download all views."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_VIEW" ] ; then

        commons_oracle_download_view "$ORACLE_DOWNLOAD_VIEW" || error_handled "Error on download view $ORACLE_DOWNLOAD_VIEW."

      fi

    fi

    # Check for all-jobs of single job

    if [ $ORACLE_DOWNLOAD_ALL_JOBS -eq 1 ] ; then

      commons_oracle_download_all_jobs || error_handled "Error on download all jobs."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_JOB" ] ; then

        commons_oracle_download_job "$ORACLE_DOWNLOAD_JOB" || error_handled "Error on download job $ORACLE_DOWNLOAD_JOB ."

      fi

    fi

    # Check for all-schedules of single schedule

    if [ $ORACLE_DOWNLOAD_ALL_SCHEDULES -eq 1 ] ; then

      commons_oracle_download_all_schedules || error_handled "Error on download all schedules."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_SCHEDULE" ] ; then

        commons_oracle_download_schedule "$ORACLE_DOWNLOAD_SCHEDULE" || error_handled "Error on download schedule $ORACLE_DOWNLOAD_SCHEDULE ."

      fi

    fi

    # Check for all-schedules of single test

    if [ $ORACLE_DOWNLOAD_ALL_TESTS -eq 1 ] ; then

      commons_oracle_download_all_tests || error_handled "Error on download all tests."

    else

      if [ ! -z "$ORACLE_DOWNLOAD_TEST" ] ; then

        commons_oracle_download_test "$ORACLE_DOWNLOAD_TEST" || error_handled "Error on download test $ORACLE_DOWNLOAD_TEST ."

      fi

    fi

  fi # end else ORACLE_DOWNLOAD_ALL

  return 0
}
#***

#****f* oracle/_oracle_compile_id_script
# FUNCTION
#   Internal function for compile a script by id.
# SEE ALSO
#   _dbm_retrieve_script_data
#   _dbm_check_if_exist_id_script
#   commons_oracle_compile_file
# SOURCE
_oracle_compile_id_script () {

  local f=""
  local id_script="$ORACLE_COMPILE_ID_SCRIPT"

  _dbm_check_if_exist_id_script "$id_script" || error_handled ""

  _dbm_retrieve_script_data "$id_script" "1" || error_handled ""

  if [ x"$DBM_SCRIPT_ADAPTER" != x"oracle" ] ; then
    error_generate "Error: script $id_script isn't connect to oracle adapter."
  fi

  f="$ORACLE_DIR/$DBM_SCRIPT_DIRECTORY/$DBM_SCRIPT_FILENAME"

  commons_oracle_compile_file "$f" "Compile file $DBM_SCRIPT_FILENAME for release $DBM_SCRIPT_REL_NAME v.$DBM_SCRIPT_REL_VERSION" || error_handled "Error on compile file $f."


  return 0
}
#***

#****f* oracle/_oracle_query_help
# FUNCTION
#   Print help message of query command.
# SOURCE
_oracle_query_help () {

  echo -en "[--stdin-query]         Set this option for query send from standard input.\n"
  echo -en "[--logging]             Enable logging of the query to log file\n"
  echo -en "[--query QUERY]         Query to execute.\n"
  echo -en "[--output-opts OPTS]    Customize sqlplus output options.\n"
  echo -en "                        Default are: set echo off heading off feedback off wrap off\n"

  return 0
}
#***

#****f* oracle/_oracle_query_args
# FUNCTION
#   Internal function for parse command line argument relative to download command.
# DESCRIPTION
#   * --stdin-query       Query send through standard input.
#   * --query             Query to execute
#   * --logging           Enable logging to file.
#   * --output-opts OPTS  Customize sqlplus output format.
# SEE ALSO
#   _oracle_connections_args
# SOURCE
_oracle_query_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_query_args args: $@)\n"

  local short_options="S:U:P:hD:t:"
  local long_options="stdin-query query: logging output-opts:"
  long_options="$long_options help"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || error_handled "Invalid parameters"

  if [ $# -lt 1 ] ; then # is there at least one param (--)
    _oracle_query_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_oracle_query_args: Found $# params)\n"

  ORACLE_QUERY_STDIN=0
  ORACLE_QUERY_CMDLINE=0
  ORACLE_QUERY_LOGGING=0
  ORACLE_QUERY_STR=""
  ORACLE_QUERY_SQLPLUS_OPTS=""

  while [ $# -gt 0 ] ; do
    case "$1" in

      -S|-U|-P|-D|-t)
        shift
        # do nothing
        ;;

      --stdin-query)
        ORACLE_QUERY_STDIN=1
        ;;
      --logging)
        ORACLE_QUERY_LOGGING=1
        ;;
      --query)
        ORACLE_QUERY_CMDLINE=1
        ORACLE_QUERY_STR="$2"
        shift
        ;;
      --output-opts)
        ORACLE_QUERY_SQLPLUS_OPTS="$2"
        shift
        ;;

      -h|--help)
        _oracle_query_help
        return 1
        ;;
      --)
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;

    esac

    shift
  done

  if [[ $ORACLE_QUERY_STDIN -eq 1 && $ORACLE_QUERY_CMDLINE -gt 1 ]] ; then
    out_handler_print "Both --query and --stdin-query options set. Only one possible."
  fi

  if [[ $ORACLE_QUERY_STDIN -eq 0 && $ORACLE_QUERY_CMDLINE -eq 0 ]] ; then
    out_handler_print "Mandatory parameter --query or --stdin-query options missing."
  fi

  if [[ $ORACLE_QUERY_CMDLINE -eq 1 && -z "$ORACLE_QUERY_STR" ]] ; then
    out_handler_print "Invalid query string."
  fi


  return 0
}
#***

#****f* oracle/_oracle_init
# FUNCTION
#   Internal function called on initialization of the oracle module.
# DESCRIPTION
# SOURCE
_oracle_query () {

  local res=0
  local sqlopts="set echo off heading off feedback off wrap off"

  ORACLE_ANS=""

  if [[ $ORACLE_QUERY_STDIN -eq 1 ]] ; then

    ORACLE_QUERY_STR=$(</dev/stdin)

    [[ $DEBUG && $DEBUG == true ]] && \
      echo -en "(_oracle_query: From stdin read:\n${ORACLE_QUERY_STR})\n"

  fi

  [[ $ORACLE_QUERY_LOGGING -eq 1 ]] && \
    _logfile_write "(oracle) Executing query:\n${ORACLE_QUERY_STR}"

  if [[ -n "${ORACLE_QUERY_SQLPLUS_OPTS}" ]] ; then
    sqlopts="${ORACLE_QUERY_SQLPLUS_OPTS}"
  fi

  sqlplus_cmd_4var "ORACLE_ANS" "${ORACLE_QUERY_STR}" "" "" "${sqlopts}"
  res=$?


  if [[ $ORACLE_QUERY_LOGGING -eq 1 ]] ; then
    _logfile_write "\n${ORACLE_ANS}" || return 1
    _logfile_write "(oracle) End query (${ORACLE_QUERY_STR}): result => $res." || return 1
  else
    out_handler_print "${ORACLE_ANS}"
  fi

  return $res
}
#***

# oracle__oracle_show_tables
_oracle_show_tables () {

  local filter=""
  if [ -n "${ORACLE_SHOW_FILTER}" ] ; then
    filter="AND REGEXP_LIKE(AT.table_name, '${ORACLE_SHOW_FILTER}') "
  fi

  commons_oracle_show_tables "" "${filter}" || error_handled "Unexpected error on retrieve list of tables."

  if [ -n "${ORACLE_ANS}" ] ; then

    local counter=1
    local tname=""
    local nrows=""
    local blocks=""
    local avg_row_len=""
    local n_part=""
    local n_subpart=""
    local last_stats_update=""
    local n_rows=$(echo -e "${ORACLE_ANS}" | wc -l)
    local nrows_size=20
    local tname_size=30

    out_hsep=1
    out_prepost_mode="any"
    out_htabs_mode="tabs"
    out_ttitle="TABLES (n. $n_rows)"

    out_headers[0]="TABLE_NAME"
    out_headers[1]="NUM_ROWS"
    out_headers[2]="BLOCKS"
    out_headers[3]="AVG_ROW_LEN"
    out_headers[4]="N_PART"
    out_headers[5]="N_SUBPART"
    out_headers[6]="LAST_STATS_UPDATE"

    out_el_pre[0]="\e[1;33m"
    out_el_pre[1]="\e[1;31m"
    out_el_pre[2]="\e[1;32m"
    out_el_pre[3]="\e[1;34m"
    out_el_pre[4]="\e[1;35m"
    out_el_pre[5]="\e[1;36m"
    out_el_pre[6]="\e[1;37m"

    out_el_post[0]="\e[m"

    IFS=$'\n'
    for row in $ORACLE_ANS ; do

      tname=$(echo $row | awk '{split($0,a,"|"); print a[1]}')
      nrows=$(echo $row | awk '{split($0,a,"|"); print a[2]}')
      blocks=$(echo $row | awk '{split($0,a,"|"); print a[3]}')
      avg_row_len=$(echo $row | awk '{split($0,a,"|"); print a[4]}')
      n_part=$(echo $row | awk '{split($0,a,"|"); print a[5]}')
      n_subpart=$(echo $row | awk '{split($0,a,"|"); print a[6]}')
      last_stats_update=$(echo $row | awk '{split($0,a,"|"); print a[7]}')

      out_rows[$counter]="row"${counter}

      eval "row${counter}[0]=\"${tname}\""
      eval "row${counter}[1]=\"${nrows}\""
      eval "row${counter}[2]=\"${blocks}\""
      eval "row${counter}[3]=\"${avg_row_len}\""
      eval "row${counter}[4]=\"${n_part}\""
      eval "row${counter}[5]=\"${n_subpart}\""
      eval "row${counter}[6]=\"${last_stats_update}\""

      # Check if needed enlarge size of first column
      if [ ${#tname} -ge $tname_size ] ; then
        tname_size=$((${#tname}+1))
      fi
      if [ ${#nrows} -ge $nrows_size ] ; then
        nrows_size=$((${#nrows}+1))
      fi

      let counter++
    done
    unset IFS

    out_tabs[0]=$tname_size
    out_tabs[1]=$nrows_size
    out_tabs[2]=14
    out_tabs[3]=12
    out_tabs[4]=13
    out_tabs[5]=15
    out_tabs[6]=24

    out_handler_print_arr

  else
    out_handler_print "No tables found."
  fi

  out_handler_clean

  return 0
}
# oracle__oracle_show_tables_end

# oracle__oracle_show_indexes
_oracle_show_indexes () {

  local filter=""
  if [ -n "${ORACLE_SHOW_FILTER}" ] ; then
    filter="AND REGEXP_LIKE(AI.table_name, '${ORACLE_SHOW_FILTER}') "
  fi

  if [ -n "${ORACLE_SHOW_INVALID}" ] ; then
    filter="${filter} AND AI.STATUS <> 'VALID' "
  fi

  if [ -n "${ORACLE_SHOW_TABLESPACE}" ] ; then
    filter="${filter} AND REGEXP_LIKE(AI.TABLESPACE_NAME, '${ORACLE_SHOW_TABLESPACE}') "
  fi

  commons_oracle_show_indexes "" "${filter}" || error_handled "Unexpected error on retrieve list of indexes."

  if [ -n "${ORACLE_ANS}" ] ; then

    local counter=0
    local attr=1
    local tname=""
    local iname=""
    local itype=""
    local unique=""
    local ctype=""
    local cname=""
    local columns=""
    local compression=""
    local tablespace=""
    local logging=""
    local blevel=""
    local avg_data_blocks=""
    local status=""
    local nrows=""
    local samplesize=""
    local last_analyzed=""

    local n_rows=$(echo -e "${ORACLE_ANS}" | wc -l)
    local tname_size=20
    local iname_size=20
    local tsname_size=16
    local cols_size=20

    out_hsep=1
    out_prepost_mode="any"
    out_htabs_mode="tabs"
    out_ttitle="INDEXES (n. $n_rows)"

    out_headers[${counter}]="TABLE_NAME" ; out_el_pre[${counter}]="\e[1;31m" ; let counter++
    out_headers[${counter}]="INDEX_NAME" ; out_el_pre[${counter}]="\e[1;32m" ; let counter++
    out_headers[${counter}]="IDX_TYPE" ; out_el_pre[${counter}]="\e[1;34m" ; let counter++
    out_headers[${counter}]="UNIQUE" ; out_el_pre[${counter}]="\e[1;35m" ; let counter++
    out_headers[${counter}]="COMPR" ; out_el_pre[${counter}]="\e[1;36m" ; let counter++
    out_headers[${counter}]="TABLESPACE_NAME" ; out_el_pre[${counter}]="\e[1;37m" ; let counter++
    out_headers[${counter}]="CTYPE" ; out_el_pre[${counter}]="\e[1;38m" ; let counter++
    out_headers[${counter}]="STATUS" ; out_el_pre[${counter}]="\e[1;34m" ; let counter++
    out_headers[${counter}]="COLUMNS" ; out_el_pre[${counter}]="\e[1;33m" ; let counter++

    counter=1

    out_el_post[0]="\e[m"

    IFS=$'\n'
    for row in $ORACLE_ANS ; do

      attr=1

      tname=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${tname}\"" ; let attr++

      iname=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${iname}\"" ; let attr++

      itype=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${itype}\"" ; let attr++

      unique=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${unique}\"" ; let attr++

      compression=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${compression}\"" ; let attr++

      tablespace=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${tablespace}\"" ; let attr++

      ctype=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${ctype}\"" ; let attr++

      status=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${status}\"" ; let attr++

      columns=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
      eval "row${counter}[${attr}]=\"${columns}\"" ; let attr++

      out_rows[$counter]="row"${counter}

      # Check if needed enlarge size of first column
      if [ ${#tname} -ge $tname_size ] ; then
        tname_size=$((${#tname}+1))
      fi
      if [ ${#iname} -ge $iname_size ] ; then
        iname_size=$((${#iname}+1))
      fi
      if [ ${#columns} -ge $cols_size ] ; then
        cols_size=$((${#columns}+1))
      fi
      if [ ${#tablespace} -ge ${tsname_size} ] ; then
        tsname_size=$((${#tablespace}+1))
      fi

      let counter++
    done
    unset IFS

    counter=0
    out_tabs[${counter}]=$tname_size ; let counter++ # "TABLE_NAME" ;
    out_tabs[${counter}]=$iname_size ; let counter++ # "INDEX_NAME"
    out_tabs[${counter}]=10 ; let counter++ # "INDEX_TYPE" ;
    out_tabs[${counter}]=7 ; let counter++ # "UNIQUE_IDX" ;
    out_tabs[${counter}]=6 ; let counter++ # "COMPR"
    out_tabs[${counter}]=$tsname_size ; let counter++ # "TABLESPACE_NAME"
    out_tabs[${counter}]=6 ; let counter++ # "CTYPE"
    out_tabs[${counter}]=9 ; let counter++ # "STATUS"
    out_tabs[${counter}]=$cols_size ; let counter++ # "COLUMNS"

    out_handler_print_arr

  else
    out_handler_print "No indexes found."
  fi

  out_handler_clean

  return 0
}
# oracle__oracle_show_indexes_end

# oracle__oracle_show_indexe
_oracle_show_index () {

  local index="$1"
  local filter=""

  filter="AND AI.INDEX_NAME = '${index}' "

  commons_oracle_show_indexes "" "${filter}" || error_handled "Unexpected error on retrieve list of indexes."

  if [ -n "${ORACLE_ANS}" ] ; then

    local counter=0
    local attr=1
    local tname=""
    local iname=""
    local itype=""
    local unique=""
    local ctype=""
    local cname=""
    local cols=""
    local compression=""
    local tablespace=""
    local logging=""
    local blevel=""
    local avg_data_blocks=""
    local status=""
    local nrows=""
    local samplesize=""
    local last_analyzed=""

    local n_rows=$(echo -e "${ORACLE_ANS}" | wc -l)
    local nrows_size=20
    local tname_size=20
    local iname_size=20
    local cname_size=20
    local tsname_size=16
    local cols_size=20

    out_vertical=1
    out_hsep=1
    out_prepost_mode="any"
    out_htabs_mode="htabs"
    out_ttitle="INDEX $index"

    out_headers[${counter}]="TABLE NAME" ; out_el_pre[${counter}]="\e[1;31m" ; let counter++
    out_headers[${counter}]="INDEX NAME" ; out_el_pre[${counter}]="\e[1;32m" ; let counter++
    out_headers[${counter}]="INDEX TYPE" ; out_el_pre[${counter}]="\e[1;34m" ; let counter++
    out_headers[${counter}]="UNIQUE" ; out_el_pre[${counter}]="\e[1;35m" ; let counter++
    out_headers[${counter}]="COMPRESSION" ; out_el_pre[${counter}]="\e[1;36m" ; let counter++
    out_headers[${counter}]="TABLESPACE NAME" ; out_el_pre[${counter}]="\e[1;37m" ; let counter++
    out_headers[${counter}]="CONSTRAINT TYPE" ; out_el_pre[${counter}]="\e[1;38m" ; let counter++
    out_headers[${counter}]="STATUS" ; out_el_pre[${counter}]="\e[1;34m" ; let counter++
    out_headers[${counter}]="COLUMNS" ; out_el_pre[${counter}]="\e[1;33m" ; let counter++
    out_headers[${counter}]="LOGGING" ; out_el_pre[${counter}]="\e[1;31m" ; let counter++
    out_headers[${counter}]="CONSTRAINT NAME" ; out_el_pre[${counter}]="\e[1;32m" ; let counter++
    out_headers[${counter}]="BLEVEL" ; out_el_pre[${counter}]="\e[1;32m" ; let counter++
    out_headers[${counter}]="AVG DATA BLOCKS PER KEY" ; out_el_pre[${counter}]="\e[1;33m" ; let counter++
    out_headers[${counter}]="NUMBER ROWS" ; out_el_pre[${counter}]="\e[1;35m" ; let counter++
    out_headers[${counter}]="SAMPLE SIZE" ; out_el_pre[${counter}]="\e[1;36m" ; let counter++
    out_headers[${counter}]="LAST ANALYZED DATE" ; out_el_pre[${counter}]="\e[1;31m" ; let counter++

    out_el_post[0]="\e[m"

    row=$ORACLE_ANS

    counter=1
    attr=1

    declare -a columns

    tname=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${tname}" ; let attr++

    iname=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${iname}" ; let attr++

    itype=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${itype}" ; let attr++

    unique=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${unique}" ; let attr++

    compression=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${compression}" ; let attr++

    tablespace=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${tablespace}" ; let attr++

    ctype=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${ctype}" ; let attr++

    status=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${status}" ; let attr++

    cols=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${cols}" ; let attr++

    logging=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${logging}" ; let attr++

    cname=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${cname}" ; let attr++

    blevel=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${blevel}" ; let attr++

    avg_data_blocks=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${avg_data_blocks}" ; let attr++

    nrows=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${nrows}" ; let attr++

    samplesize=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${samplesize}" ; let attr++

    last_analyzed=$(echo $row | awk "{split(\$0,a,\"|\"); print a[${attr}]}")
    columns[${attr}]="${last_analyzed}" ; let attr++

    out_rows[0]="columns"
    out_tabs[0]=40
    out_htabs[0]=40

    out_handler_print_arr

  else
    out_handler_print "No index ${index} found."
  fi

  out_handler_clean

  return 0
}
# oracle__oracle_show_index_end

# vim: syn=sh filetype=sh ts=2 sw=2
