#!/bin/bash
#------------------------------------------------
# Author(s): Geaaru, geaaru@gmail.com
# $Id$
# License: GPL 2.0
#------------------------------------------------

name="ssl"
ssl_authors="Geaaru"
ssl_creation_date="Mar 29, 2015"
ssl_version="0.1.0"

#****f* ssl/ssl_version
# FUNCTION
#   Show version of ssl module
# SOURCE
ssl_version () {
  echo -en "Version: ${package_version}\n"

  return 0
}
#***

#****f* ssl/ssl_long_help
# FUNCTION
#  Show long help message.
# SOURCE
ssl_long_help () {

   echo -en "===========================================================================\n"
   echo -en "Module [${name}]:\n"
   echo -en "Author(s): ${package_authors}\n"
   echo -en "Created: ${package_creation_date}\n"
   echo -en "Version: ${package_version}\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\tcreate                  Add a new entry to tunnel master data inside\n"
   echo -en "\t                        dbrm database.\n"
   echo -en "\tenable                  Active an existing tunnel.\n"
   echo -en "\tdisable                 Disable an active tunnel.\n"
   echo -en "\tlist                    Show list of tunnels.\n"
   echo -en "\tinit                    Initialize SSL extension.\n"
   echo -en "\tdelete                  Delete an entry from tunnel list.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
#***

#****f* ssl/ssl_show_help
# FUNCTION
#  Show help message
# SOURCE
ssl_show_help () {

   echo -en "===========================================================================\n"
   echo -en "Module [${name}]:\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\tcreate                  Add a new entry to tunnel master data inside\n"
   echo -en "\t                        dbrm database.\n"
   echo -en "\tenable                  Active an existing tunnel.\n"
   echo -en "\tdisable                 Disable an active tunnel.\n"
   echo -en "\tlist                    Show list of tunnels.\n"
   echo -en "\tinit                    Initialize SSL extension.\n"
   echo -en "\tdeinit                  Remove SSL extension table.\n"
   echo -en "\tdelete                  Delete an entry from tunnel list.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

   return 0
}
#***

#****f* ssl/ssl_create
# FUNCTION
#  Create command function.
# SOURCE
ssl_create () {

  # Shift first two input param
  shift 2

  _ssl_check_ext || error_handled ""

  _ssl_create_args "$@" || return 1

  _ssl_add_tunnel || error_handled ""

  return 0

}
#***

#****f* ssl/ssl_init
# FUNCTION
#  Initialize current DBRM database
#  with SSL extension table.
# SOURCE
ssl_init () {

  _ssl_check_ext "0"

  if [ $? -eq 1 ] ; then
    _sqlite_compile -c "$DRM_DB" -f ${MODULES_DIR}/extensions-scripts/ssl_sqlite_schema.sql || \
      error_generate "Error on initialize ssl extension."
  else
    out_handler_print "Ssl extensions already installed. Nothing to do."
  fi

  return 0

}
#***

#****f* ssl/ssl_deinit
# FUNCTION
#  Remove SSL extension from DBRM database.
# SOURCE
ssl_deinit () {

  local query=""

  _ssl_check_ext "0" || \
    error_handled "SSL Extension is not installed. Nothing to do."

  query="
    DROP TABLE SslTunnels
  "

  confirmation_question \
    "Are you sure to remove SSL Extension? All yours data will be lost. [yes/no]: "
  if [ $? -eq 0 ] ; then

    _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
      "Error on remove SSL Extension table."

  fi

  return 0

}
#***

#****f* ssl/ssl_delete
# FUNCTION
#  Delete a tunnel.
# SOURCE
ssl_delete () {

  # Shift first two input param
  shift 2

  _ssl_check_ext || error_handled ""

  _ssl_delete_args "$@" || return 1

  _ssl_delete || error_handled ""

  return 0

}
#***

#****f* ssl/ssl_list
# FUNCTION
#  Show list of tunnels.
# SOURCE
ssl_list () {

  local id_tunnel=""
  local name=""
  local remote_host=""
  local remote_port=""
  local tunnel_host=""
  local tunnel_hport=""
  local tunnel_user=""
  local reverse=""
  local local_port=""
  local local_host=""
  local pid=""
  local n_tunnels=0
  local counter=1
  local name_size=10
  local rhost_size=15
  local thost_size=15
  local tuser_size=10

  # Shift first two input param
  shift 2

  _ssl_check_ext || error_handled ""

  _ssl_count_tunnels
  n_tunnels=$?

  if [ $n_tunnels -eq 0 ] ; then
    out_handler_print "No tunnels available."

  else

    # Retrieve data about active tunnels.
    _ssl_read_tuns_file "$DBRM_SSL_ACTIVE_TUN_FILE"

    _ssl_get_list || error_handled ""

    out_ttitle="SSL Tunnels"
    out_hsep=1
    out_prepost_mode="any"
    out_htabs_mode="tabs"

    out_headers[0]="ID"
    out_headers[1]="NAME"
    out_headers[2]="REMOTE HOST"
    out_headers[3]="R PORT"
    out_headers[4]="TUNNEL HOST"
    out_headers[5]="T HPORT"
    out_headers[6]="T USER"
    out_headers[7]="REVERSE"
    out_headers[8]="LOCAL PORT"
    out_headers[9]="LOCAL HOST"
    out_headers[10]="PID"

    out_el_pre[0]="\e[1;33m"
    out_el_pre[1]="\e[1;32m"
    out_el_pre[2]="\e[1;31m"
    out_el_pre[3]="\e[1;34m"
    out_el_pre[4]="\e[1;30m"
    out_el_pre[5]="\e[1;35m"
    out_el_pre[6]="\e[1;29m"
    out_el_pre[7]="\e[1;36m"
    out_el_pre[8]="\e[1;37m"
    out_el_pre[9]="\e[1;31m"
    out_el_pre[10]="\e[1;33m"

    out_el_post[0]="\e[m"

    IFS=$'\n'
    for row in $_sqlite_ans ; do

      id_tunnel=`echo $row | awk '{split($0,a,"|"); print a[1]}'`
      name=`echo $row | awk '{split($0,a,"|"); print a[2]}'`
      remote_host=`echo $row | awk '{split($0,a,"|"); print a[3]}'`
      remote_port=`echo $row | awk '{split($0,a,"|"); print a[4]}'`
      tunnel_host=`echo $row | awk '{split($0,a,"|"); print a[5]}'`
      tunnel_hport=`echo $row | awk '{split($0,a,"|"); print a[6]}'`
      tunnel_user=`echo $row | awk '{split($0,a,"|"); print a[7]}'`
      reverse=`echo $row | awk '{split($0,a,"|"); print a[8]}'`
      local_port=`echo $row | awk '{split($0,a,"|"); print a[9]}'`
      local_host=`echo $row | awk '{split($0,a,"|"); print a[10]}'`
      pid="-"

      out_rows[$counter]="row"${counter}

      # Check if tunnel is active
      if [ -n "${ssl_active_id_tuns[${id_tunnel}]}" ] ; then

        if [[ -n "${ssl_active_ports[${id_tunnel}]}" && "${ssl_active_ports[${id_tunnel}]}" != "${local_port}" ]] ; then

          local_port="${local_port} (${ssl_active_ports[${id_tunnel}]})*"

        fi

        if [ -n "${ssl_active_pids[${id_tunnel}]}" ] ; then
          pid="${ssl_active_pids[${id_tunnel}]}"
        fi

        id_tunnel="${id_tunnel}*"
      fi

      eval "row${counter}[0]=\"${id_tunnel}\""
      eval "row${counter}[1]=\"${name}\""
      eval "row${counter}[2]=\"${remote_host}\""
      eval "row${counter}[3]=\"${remote_port}\""
      eval "row${counter}[4]=\"${tunnel_host}\""
      eval "row${counter}[5]=\"${tunnel_hport}\""
      eval "row${counter}[6]=\"${tunnel_user}\""
      if [ $reverse -eq 1 ] ; then
        eval "row${counter}[7]=\"Y\""
      else
        eval "row${counter}[7]=\"N\""
      fi
      eval "row${counter}[8]=\"${local_port}\""
      eval "row${counter}[9]=\"${local_host}\""
      eval "row${counter}[10]=\"${pid}\""

      if [ ${#name} -ge $name_size ] ; then
        name_size=$((${#name}+1))
      fi

      if [ ${#remote_host} -ge $rhost_size ] ; then
        rhost_size=$((${#remote_host}+1))
      fi

      if [ ${#tunnel_host} -ge $thost_size ] ; then
        thost_size=$((${#tunnel_host}+1))
      fi

      if [ ${#tunnel_user} -ge $tuser_size ] ; then
        tuser_size=$((${#tunnel_user}+1))
      fi

      let counter++
    done
    unset IFS

    out_tabs[0]=6
    out_tabs[1]=$name_size
    out_tabs[2]=$rhost_size
    out_tabs[3]=8
    out_tabs[4]=$thost_size
    out_tabs[5]=8
    out_tabs[6]=$tuser_size
    out_tabs[7]=8
    out_tabs[8]=12
    out_tabs[9]=11
    out_tabs[10]=7

    out_handler_print_arr

  fi

  out_handler_clean

  return 0

}
#***

#****f* ssl/ssl_enable
# FUNCTION
#   Activate a tunnel
# RETURN VALUES
#   1 on error
#   0 on success
# SOURCE
ssl_enable () {

  local id_tunnel=""
  local id_tunnel=""
  local name=""
  local remote_host=""
  local remote_port=""
  local tunnel_host=""
  local tunnel_hport=""
  local tunnel_user=""
  local reverse=""
  local local_port=""
  local local_host=""
  local port_busy=1
  local max_increment_test=10
  local last_port=""
  local first_port=""
  local ssl_url=""

  # Shift first two input param
  shift 2

  _ssl_check_ext || error_handled ""

  _ssl_enable_args "$@" || error_handled ""

  _ssl_exists_tun "$DBRM_SSL_ID_TUNNEL" "$DBRM_SSL_TUN_NAME" || \
    error_generate "Tunnel ${DBRM_SSL_ID_TUNNEL}${DBRM_SSL_TUN_NAME} not found."

  # Retrieva data about tunnel.
  _ssl_get_list "$DBRM_SSL_ID_TUNNEL" "$DBRM_SSL_TUN_NAME"

  id_tunnel=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[1]}'`
  name=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[2]}'`
  remote_host=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[3]}'`
  remote_port=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[4]}'`
  tunnel_host=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[5]}'`
  tunnel_hport=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[6]}'`
  tunnel_user=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[7]}'`
  reverse=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[8]}'`
  local_port=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[9]}'`
  local_host=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[10]}'`

  # Check if tunnel is already active
  _ssl_read_tuns_file "$DBRM_SSL_ACTIVE_TUN_FILE"

  [ -n "${ssl_active_id_tuns[${id_tunnel}]}" ] && \
    error_generate "Tunnel ${id_tunnel} is already active.\nIf doesn't work try to disable and enable again tunnel."

  # Check if local port is already busy (only for normal tunnel)
  if [ $reverse -eq 0 ] ; then
    _ssl_check_port "${local_port}"
    port_busy=$?

    if [[ $port_busy -eq 1 && $DBRM_SSL_TUN_AUTOINCREMENT -eq 0 ]] ; then
      error_generate \
        "I can't enable tunnel ${id_tunnel}: local port ${local_port} is busy.\nEnable --auto-increment option for use automatically a different port."
    fi

    if [ $port_busy -eq 1 ] ; then

      first_port=$local_port
      last_port=$((local_port+max_increment_test))
      while [[ $port_busy -eq 1 && $max_increment_test -gt 0 ]] ; do

        let local_port++
        let max_increment_test--

        _ssl_check_port "${local_port}"
        port_busy=$?
      done

      [ $port_busy -eq 1 ] && error_generate \
        "I can't enable tunnel ${id_tunnel}: Ports ${first_port}-${last_port} are busy.\nTry to use a different port."

      out_handler_print "For tunnel ${id_tunnel} I use local port ${local_port}. Port ${first_port} is busy."

    fi
  fi

  # Create ssl_url
  if [ $reverse -eq 1 ] ; then
    # POST: Reverse Tunnel

    ssl_url="${remote_host}:${remote_port}:${local_host}:${local_port} -p ${tunnel_hport}"
    if [ -n "${tunnel_user}" ] ; then
      ssl_url="${ssl_url} -l ${tunnel_user}"
    fi
    ssl_url="${ssl_url} ${tunnel_host}"

  else
    # POST: Normal tunnel

    ssl_url="${local_port}:${remote_host}:${remote_port} -p ${tunnel_hport}"
    if [ -n "${tunnel_user}" ] ; then
      ssl_url="${ssl_url} -l ${tunnel_user}"
    fi
    ssl_url="${ssl_url} ${tunnel_host}"

  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "(ssl_enable): Use ssl_url = '${ssl_url}'\n"

  _ssl_start_tun "${id_tunnel}" "${ssl_url}" "${reverse}" ||
    error_generate "Error on start tunnel ${id_tunnel}."

  _ssl_add_tun2file "$DBRM_SSL_ACTIVE_TUN_FILE" "${id_tunnel}" "${local_port}" "${ssh_pid}" || \
    error_generate "Error on save active tunnel to file $DBRM_SSL_ACTIVE_TUN_FILE."

  out_handler_print "Tunnel ${id_tunnel} is now active with pid $ssh_pid."

  unset ssh_pid

  return 0
}
#***

#****f* ssl/ssl_disable
# FUNCTION
#   Stop an active tunnel.
# RETURN VALUES
#   1 on error
#   0 on success
# SOURCE
ssl_disable () {

  local pid=""
  local id_tunnel=""
  local name=""

  # Shift first two input param
  shift 2

  _ssl_check_ext || error_handled ""

  _ssl_disable_args "$@" || error_handled ""

  _ssl_exists_tun "$DBRM_SSL_ID_TUNNEL" "$DBRM_SSL_TUN_NAME" || \
    error_generate "Tunnel ${DBRM_SSL_ID_TUNNEL}${DBRM_SSL_TUN_NAME} not found."

  # Retrieva data about tunnel.
  _ssl_get_list "$DBRM_SSL_ID_TUNNEL" "$DBRM_SSL_TUN_NAME"

  id_tunnel=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[1]}'`
  name=`echo $_sqlite_ans | awk '{split($0,a,"|"); print a[2]}'`

  # Check if tunnel is already active
  _ssl_read_tuns_file "$DBRM_SSL_ACTIVE_TUN_FILE"

  [ -z "${ssl_active_id_tuns[${id_tunnel}]}" ] && \
    error_generate "Tunnel ${id_tunnel} is not active."

  pid=${ssl_active_pids[${id_tunnel}]}

  _ssl_check_ssl_pid "$pid"

  if [ $? -eq 1 ] ; then

    [[ $DEBUG && $DEBUG == true ]] && echo -en \
      "(ssl_disable): Send TERM signal to process $pid.\n"

    kill -s TERM $pid
    [ $? -eq 1 ] && error_generate \
      "Error on kill tunnel ${DBRM_SSL_ID_TUNNEL}${DBRM_SSL_TUN_NAME} with pid ${pid}."
  else

    out_handler_print "SSH process $pid is not available. I clean session file."

  fi

  _ssl_del_tun2file "$DBRM_SSL_ACTIVE_TUN_FILE" "${id_tunnel}" || \
    error_generate "Error on remove tunnel ${id_tunnel} from file ${DBRM_SSL_ACTIVE_TUN_FILE}."

  out_handler_print "Tunnel ${id_tunnel} is now disable."

  return 0
}
#***

##################################################################
# Internal functions
##################################################################

#****f* ssl/_ssl_init
# FUNCTION
#  Internal function called on initialization of the ssl module.
# SOURCE
_ssl_init () {

  if [ -z "$DBRM_SSL_ACTIVE_TUN_FILE" ] ; then
    # Set default value for DBRM_SSL_ACTIVE_TUN_FILE
    DBRM_SSL_ACTIVE_TUN_FILE=$HOME/.local/share/dbrm/dbrm_ssl_tuns
  fi

  local dir=$(dirname $DBRM_SSL_ACTIVE_TUN_FILE)

  if [ ! -d "${dir}" ] ; then
    mkdir -p ${dir} || error_generate \
      "(_ssl_init): Error on create directory ${dir} for SSL active tunnels file."
  fi

}
#***

#****f* ssl/_ssl_check_ext
# FUNCTION
#   Check presence of ssl extensions table.
# RETURN VALUES
#  1  if extension is not present.
#  0  if extension is present
# SOURCE
_ssl_check_ext () {

  local result=1
  local ssl_gen_err=${1:-1}
  local exists_tb=0

  # Check if exists table SslTunnels
  _sqlite_exists_table -c "$DRM_DB" -t "SslTunnels"
  exists_tb=$?

  if [ $exists_tb -eq 0 ] ; then

    if [[ $ssl_gen_err -eq 1 || $ssl_gen_err == "1" ]] ; then
      error_generate \
        "Ssl extensions is not installed on current DBRM db.\nExecute ssl init command and try again."
    fi

    return 1

  fi

  return 0
}
#***

#****f* ssl/_ssl_create_args
# FUNCTION
#   Parse command line arguments of create method.
# SOURCE
_ssl_create_args () {

  [[ $DEBUG ]] && echo -en "(_ssl_create_args args: $@)\n"

  local short_options="h"
  local long_options="on-local-port: remote-host: remote-port: tunnel-hport: tunnel-host:"
  long_options="$long_options tunnel-user: name: help reverse on-local-host:"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
    error_handled "Invalid parameters"

  if [ $# -lt 2 ] ; then
    _ssl_create_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_create_args: Found $# params)\n"

  DBRM_SSL_LPORT=""
  DBRM_SSL_REMOTE_HOST=""
  DBRM_SSL_REMOTE_PORT=""
  DBRM_SSL_TUN_HOST=""
  DBRM_SSL_TUN_PORT=""
  DBRM_SSL_TUN_USER=""
  DBRM_SSL_TUN_NAME=""
  DBRM_SSL_TUN_REVERSE=0
  DBRM_SSL_REVERSE=""
  DBRM_SSL_LHOST=""

  while [ $# -gt 0 ] ; do
    case "$1" in

      -h|--help)
        _ssl_create_help
        return 1
        ;;
      --on-local-port)
        DBRM_SSL_LPORT="$2"
        shift
        ;;
      --remote-host)
        DBRM_SSL_REMOTE_HOST="$2"
        shift
        ;;
      --remote-port)
        DBRM_SSL_REMOTE_PORT="$2"
        shift
        ;;
      --tunnel-host)
        DBRM_SSL_TUN_HOST="$2"
        shift
        ;;
      --tunnel-hport)
        DBRM_SSL_TUN_PORT="$2"
        shift
        ;;
      --tunnel-user)
        DBRM_SSL_TUN_USER="$2"
        shift
        ;;
      --name)
        DBRM_SSL_TUN_NAME="$2"
        shift
        ;;
      --on-local-host)
        DBRM_SSL_LHOST="$2"
        shift
        ;;
      --reverse)
        DBRM_SSL_TUN_REVERSE=1
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;
    esac
    shift
  done

  if [ -z "$DBRM_SSL_TUN_NAME" ] ; then
    error_generate "Missing --name option."
  fi

  if [ -z "$DBRM_SSL_REMOTE_HOST" ] ; then
    error_generate "Missing --remote-host option."
  fi

  if [ -z "$DBRM_SSL_TUN_HOST" ] ; then
    error_generate "Missing --tunnel-host option."
  fi

  if [[ $DBRM_SSL_TUN_REVERSE -eq 1 && -z "$DBRM_SSL_LHOST" ]] ; then
    error_generate "Missing --on-local-host option when --reverse is enable."
  fi

  return 0
}
#***

#****f* ssl/_ssl_create_help
# FUNCTION
#   Print help message of create method.
# SOURCE
_ssl_create_help () {

  echo -en "[--on-local-port port]  Local port where binding tcp flow versus remote host\n"
  echo -en "                        through ssl tunnel.\n"
  echo -en "[--on-local-host host]  Host (local or an host reachable without tunnel)\n"
  echo -en "                        that will be available in remote host with reverse tunnel.\n"
  echo -en "[--remote-host host]    Host to reach through ssl tunnel.\n"
  echo -en "[--remote-port port]    Port of remote host to reach through ssl tunnel or for\n"
  echo -en "                        reverse tunnel, port in binding to remote host for reach\n"
  echo -en "                        local host.\n"
  echo -en "[--tunnel-host host]    Host to use for reach remote host.\n"
  echo -en "[--tunnel-hport port]   Port of host used for tunnel. Default is 22.\n"
  echo -en "[--tunnel-user user]    User to use on tunnel creation. Default is current user.\n"
  echo -en "[--name name]           Name of the tunnel.\n"
  echo -en "[--reverse]             Reverse tunnel.\n"
  echo -en "\n"

  return 0
}
#***


#****f* ssl/_ssl_inst_tunnel
# FUNCTION
#   Insert tunnel information to SslTunnels table.
#   Save on _ssl_id_tunnel variable id of the tunnel.
# DESCRIPTION
#   An example of reverse tunnel:
#     ssh -R 127.0.0.1:9999:127.0.0.1:80 -p 12722 -l geaaru 127.0.0.1
#   Where:
#     - remote_host  = 127.0.0.1
#     - remote_port  = 9999
#     - tunnel_host  = 127.0.0.1
#     - tunnel_hport = 12722
#     - tunnel_user  = geaaru
#     - local_port   = 80
#     - local_host   = 127.0.0.1
#     - reverse      = 1
#   An example of tunnel:
#     ssh -L 12345:remotesite.com:80 utente@serversshremoto.com
#   Where:
#     - remote_host  = remotesite.com
#     - remote_port  = 80
#     - tunnel_host  = serversshremote.com
#     - tunnel_hport = 22
#     - tunnel_user  = utente
#     - local_port   = 12345
#     - local_host   = NULL
#     - reverse      = 0
# RETURN VALUE
#   1 on error
#   0 on success.
# SOURCE
_ssl_add_tunnel () {

  local query=""
  local remote_port="22"
  local tunnel_port="22"
  local local_port="22"
  local local_host="NULL"
  local tunnel_user=""

  if [ $DBRM_SSL_TUN_REVERSE -eq 1 ] ; then
    local_host="'$DBRM_SSL_LHOST'"
  fi

  if [ -n "$DBRM_SSL_REMOTE_PORT" ] ; then
    remote_port="${DBRM_SSL_REMOTE_PORT}"
  fi

  if [ -n "$DBRM_SSL_TUN_PORT" ] ; then
    tunnel_port="$DBRM_SSL_TUN_PORT"
  fi

  if [ -n "$DBRM_SSL_TUN_USER" ] ; then
    tunnel_user="$DBRM_SSL_TUN_USER"
  fi

  if [ -n "$DBRM_SSL_LPORT" ] ; then
    local_port="$DBRM_SSL_LPORT"
  fi

  query="
    INSERT INTO SslTunnels
    (name, remote_host, remote_port,
     tunnel_host, tunnel_hport, tunnel_user,
     reverse_flag, local_port, local_host)
    VALUES (
      '${DBRM_SSL_TUN_NAME}',
      '${DBRM_SSL_REMOTE_HOST}',
      ${remote_port},
      '${DBRM_SSL_TUN_HOST}',
      '${tunnel_port}',
      '${tunnel_user}',
      ${DBRM_SSL_TUN_REVERSE},
      ${local_port},
      ${local_host})
  "

  _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
    "(_ssl_add_tunnel): Error on insert tunnel $DBRM_SSL_TUN_NAME."

  return 0
}
#***


#****f* ssl/_ssl_delete
# FUNCTION
#   Handle create method.
# SOURCE
_ssl_delete () {

  local result=1
  local query=""
  local msg=""

  # TODO: Check if session is active

  _ssl_exist_tunnel "${DBRM_SSL_TUN_NAME}${DBRM_SSL_ID_TUNNEL}" || \
    error_generate "Tunnel ${DBRM_SSL_ID_TUNNEL}${DBRM_SSL_TUN_NAME} doesn't exist."

  if [ -n "${DBRM_SSL_ID_TUNNEL}" ] ; then
    where="WHERE id_tunnel = ${DBRM_SSL_ID_TUNNEL}"
    msg="with Id ${DBRM_SSL_ID_TUNNEL}"
  else
    where="WHERE name = '${DBRM_SSL_TUN_NAME}'"
    msg="with name ${DBRM_SSL_TUN_NAME}"
  fi

  confirmation_question "Are you sure to remove tunnel ${msg}? [yes/no]: "
  if [ $? -eq 0 ] ; then

    query="
      DELETE FROM SslTunnels
      ${where}
    "

    _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
      "(_ssl_delete): Error on delete tunnel ${msg}."

  fi

  return 0
}
#***


#****f* ssl/_ssl_delete_args
# FUNCTION
#   Parse command line arguments of delete method.
# SOURCE
_ssl_delete_args () {

  [[ $DEBUG ]] && echo -en "(_ssl_delete_args args: $@)\n"

  local short_options="h"
  local long_options="id-tunnel: help"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
    error_handled "Invalid parameters"

  if [ $# -lt 2 ] ; then
    _ssl_delete_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_delete_args: Found $# params)\n"

  DBRM_SSL_ID_TUNNEL=""
  DBRM_SSL_TUN_NAME=""

  while [ $# -gt 0 ] ; do
    case "$1" in

      -h|--help)
        _ssl_delete_help
        return 1
        ;;
      --id-tunnel)
        DBRM_SSL_ID_TUNNEL="$2"
        shift
        ;;
      --name)
        DBRM_SSL_TUN_NAME="$2"
        shift
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;
    esac
    shift
  done

  if [[ -z "$DBRM_SSL_TUN_NAME" && -z "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Missing --name or --id-tunnel option."
  fi

  if [[ -n "$DBRM_SSL_TUN_NAME" && -n "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Use only --name or --id-tunnel option."
  fi

  return 0
}
#***

#****f* ssl/_ssl_delete_help
# FUNCTION
#   Print help message of delete method.
# SOURCE
_ssl_delete_help () {

  echo -en "[--name name]           Name of the tunnel to delete.\n"
  echo -en "[--id-tunnel id]        Id of the tunnel to delete.\n"
  echo -en "\n"

  return 0
}
#***

#****f* ssl/_ssl_exist_tunnel
# FUNCTION
#   Check if exists tunnel.
# INPUT
#   id_tunnel  Id of the tunnel to check if exists.
#   name       Name of the tunnel to check if exists.
# RETURN
#   1  on error or if record is not present.
#   0  if tunnel is present.
# SOURCE
_ssl_exist_tunnel() {

  local id_tunnel="$1"
  local name="$2"
  local where=""
  local query=""

  [[ -z "$id_tunnel" && -z "$name" ]] && return 1

  if [ -n "$id_tunnel" ] ; then
    where="WHERE id_tunnel = $id_tunnel"
  else
    where="WHERE name = '$name'"
  fi

  query="
    SELECT COUNT(1) as res
    FROM SslTunnels
    ${where}
  "

  _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
    "(_ssl_exist_tunnel): Error on check if tunnel ${id_tunnel}${name} exists."

  if [ x"$_sqlite_ans" != x"1" ] ; then 
    return 1
  fi

  return 0
}
#***

#****f* ssl/_ssl_get_list
# FUNCTION
#   Return list of active tunnel or if id_tunnel/name is passed
#   information about a single tunnel.
#   Data are saved on $_sqlite_ans variable.
# INPUT
#   id_tunnel  (optional) Id of the tunnel.
#   name       (optional) Name of the tunnel.
# RETURN
#   1  on error
#   0  on success
# SOURCE
_ssl_get_list () {

  local id_tunnel="$1"
  local name="$2"
  local where=""
  local query=""

  if [ -n "$id_tunnel" ] ; then
    where="WHERE id_tunnel = $id_tunnel"
  else
    if [ -n "$name" ] ; then
      where="WHERE name = '$name'"
    fi
  fi

  query="
    SELECT *
    FROM SslTunnels
    ${where}
  "

  _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
    "(_ssl_get_list): Error on retrieve data about tunnels."

  return 0
}
#***

#****f* ssl/_ssl_exists_tun
# FUNCTION
#  Check if tunnel exists by id_tunnel or name.
# INPUT
#   id_tunnel  (optional) Id of the tunnel.
#   name       (optional) Name of the tunnel.
# RETURN VALUE
#   1 if not exists
#   0 if exists
# SOURCE
_ssl_exists_tun () {

  local id_tunnel="$1"
  local name="$2"
  local query=""
  local ans=1

  [[ -z "$id_tunnel" && -z "$name" ]] && error_generate \
    "(_ssl_exists_tun): Missing both id_tunnel or name argument."

  if [ -n "$id_tunnel" ] ; then
    where="WHERE id_tunnel = $id_tunnel"
  else
    if [ -n "$name" ] ; then
      where="WHERE name = '$name'"
    fi
  fi

  query="
    SELECT COUNT(1)
    FROM SslTunnels
    ${where}
  "

  _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
    "(_ssl_get_list): Error on check if exists tunnel ${id_tunnel}${name}."

  if [ x"$_sqlite_ans" == x"1" ] ; then
    ans=0
  fi

  return $ans
}
#***

#****f* ssl/_ssl_count_tunnels
# FUNCTION
#   Return number of tunnels.
# RETURN
#   N  number of tunnels.
# SOURCE
_ssl_count_tunnels () {

  local query=""

  query="
    SELECT COUNT(1)
    FROM SslTunnels
  "

  _sqlite_query -c "$DRM_DB" -q "$query" || error_handled \
    "(_ssl_count_tunnels): Error on count tunnels."

  if [ -z "$_sqlite_ans" ] ; then
    error_generate "Error on count tunnels."
  fi

  return $_sqlite_ans
}
#***

#****f* ssl/_ssl_enable_args
# FUNCTION
#   Parse command line arguments of enable method.
# SOURCE
_ssl_enable_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_enable_args args: $@)\n"

  local short_options="h"
  local long_options="id-tunnel: name: auto-increment help no-def-opts use-sshpass"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
    error_handled "Invalid parameters"

  if [ $# -lt 2 ] ; then
    _ssl_enable_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_enable_args: Found $# params)\n"

  DBRM_SSL_ID_TUNNEL=""
  DBRM_SSL_TUN_NAME=""
  DBRM_SSL_TUN_AUTOINCREMENT=0
  DBRM_SSL_TUN_DEF_OPTS=1
  DBRM_SSL_USE_SSHPASS=0

  while [ $# -gt 0 ] ; do
    case "$1" in

      -h|--help)
        _ssl_enable_help
        return 1
        ;;
      --id-tunnel)
        DBRM_SSL_ID_TUNNEL="$2"
        shift
        ;;
      --name)
        DBRM_SSL_TUN_NAME="$2"
        shift
        ;;
      --auto-increment)
        DBRM_SSL_TUN_AUTOINCREMENT=1
        ;;
      --no-def-opts)
        DBRM_SSL_TUN_DEF_OPTS=0
        ;;
      --use-sshpass)
        DBRM_SSL_USE_SSHPASS=1
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;
    esac
    shift
  done

  if [[ -z "$DBRM_SSL_TUN_NAME" && -z "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Missing --name or --id-tunnel option."
  fi

  if [[ -n "$DBRM_SSL_TUN_NAME" && -n "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Use only --name or --id-tunnel option."
  fi

  if [[ $DBRM_SSL_USE_SSHPASS -eq 1 && -z "${SSHPASS}" ]] ; then
    error_generate "Set SSHPASS environment variable with --use-sshpass."
  fi

  if [ $DBRM_SSL_USE_SSHPASS -eq 1 ] ; then
    commons_exists_prog "sshpass" "-V"
    error_handled "sshpash program not found.\nCheck your PATH or remove --use-sshpass option."
  fi

  return 0
}
#***

#****f* ssl/_ssl_disable_args
# FUNCTION
#   Parse command line arguments of disable method.
# SOURCE
_ssl_disable_args () {

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_disable_args args: $@)\n"

  local short_options="h"
  local long_options="id-tunnel: name: help"

  $(set -- $(getopt -u -q -a -o "$short_options" -l "$long_options" -- "$@")) || \
    error_handled "Invalid parameters"

  if [ $# -lt 2 ] ; then
    _ssl_disable_help
    return 1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_ssl_disable_args: Found $# params)\n"

  DBRM_SSL_ID_TUNNEL=""
  DBRM_SSL_TUN_NAME=""

  while [ $# -gt 0 ] ; do
    case "$1" in

      -h|--help)
        _ssl_disable_help
        return 1
        ;;
      --id-tunnel)
        DBRM_SSL_ID_TUNNEL="$2"
        shift
        ;;
      --name)
        DBRM_SSL_TUN_NAME="$2"
        shift
        ;;
      *)
        error_generate "Invalid parameter $1."
        ;;
    esac
    shift
  done

  if [[ -z "$DBRM_SSL_TUN_NAME" && -z "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Missing --name or --id-tunnel option."
  fi

  if [[ -n "$DBRM_SSL_TUN_NAME" && -n "$DBRM_SSL_ID_TUNNEL" ]] ; then
    error_generate "Use only --name or --id-tunnel option."
  fi

  return 0
}
#***

#****f* ssl/_ssl_disable_help
# FUNCTION
#   Print help message of disable method.
# SOURCE
_ssl_disable_help () {

  echo -en "[--name name]           Name of the tunnel to activate.\n"
  echo -en "                        Use this or --id-tunnel.\n"
  echo -en "[--id-tunnel id]        Id of the tunnel to activate.\n"
  echo -en "                        Use this or --name.\n"
  echo -en "\n"

  return 0
}
#***


#****f* ssl/_ssl_enable_help
# FUNCTION
#   Print help message of enable method.
# SOURCE
_ssl_enable_help () {

  echo -en "[--name name]           Name of the tunnel to activate.\n"
  echo -en "                        Use this or --id-tunnel.\n"
  echo -en "[--id-tunnel id]        Id of the tunnel to activate.\n"
  echo -en "                        Use this or --name.\n"
  echo -en "[--auto-increment]      If local port is busy, automatically\n"
  echo -en "                        increment port until a free port is found.\n"
  echo -en "                        This param is optional.\n"
  echo -en "[--no-def-opts]         Disable default options used on tunnel.\n"
  echo -en "                        This param is optional.\n"
  echo -en "[--use-sshpass]         Use sshpass for send password to ssh session.\n"
  echo -en "                        For security considerations a best way is to use\n"
  echo -en "                        ssh key authentication.\n"
  echo -en "                        On use sshpass set SSHPASS env variable with\n"
  echo -en "                        password string.\n"
  echo -en "\n"

  return 0
}
#***

#****f* ssl/_ssl_add_tun2file
# FUNCTION
#   Add id_tunnel, port, pid to file for trace ssl tunnels.
#   On file I use pipe (|) as separator.
# RETURN VALUES
#   1 on error
#   0 on success
# SOURCE
_ssl_add_tun2file () {

  local file="$1"
  local id_tun="$2"
  local port="$3"
  local pid="$4"


  [ -z "$file" ]   && return 1
  [ -z "$id_tun" ] && return 1
  [ -z "$port" ]   && return 1
  [ -z "$pid" ]    && return 1

  local out="${id_tun}|${port}|${pid}"

  echo "$out" >> $file

  return $?
}
#***

#****f* ssl/_ssl_add_tun2file
# FUNCTION
#   Remove id_tunnel, port, pid to file for trace ssl tunnels.
# RETURN VALUES
#   1 on error
#   0 on success
# SOURCE
_ssl_del_tun2file () {

  local file="$1"
  local id_tun="$2"

  [ -z "$file" ]   && return 1
  [ -z "$id_tun" ] && return 1

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "sed -i -n \"'/^${id_tun}|.*/!p'\" $file\n"

  sed -i -n "/^${id_tun}|.*/!p" $file || \
    error_generate "Error on remove SSL tunnel ${id_tunnel} from temporary file."

  return 0
}
#***

#****f* ssl/_ssl_start_tun
# FUNCTION
#   Start SSL Tunnel
# RETURN VALUES
#   1 on error
#   0 on success
# SOURCE
_ssl_start_tun () {

  local id_tunnel="$1"
  local ssl_url="$2"
  local reverse_flag="${3:-0}"
  local opts=""
  local ans=0

  [ -z "$id_tunnel" ] && error_generate "(_ssl_start_tun): Invalid id_tunnel."
  [ -z "$ssl_url" ] && error_generate "(_ssl_start_tun): Invalid ssl_url."
  [ -z "$reverse_flag" ] && error_generate "(_ssl_start_tun): Invalid reverse flag."

  local def_opts=" \
    -N
    -o ServerAliveInterval=30 \
    -o ServerAliveCountMax=4 \
    -o ExitOnForwardFailure=yes \
    -o StrictHostKeyChecking=no \
    -o CheckHostIP=no \
  "

  if [ $DBRM_SSL_USE_SSHPASS -eq 0 ] ; then
    def_opts="$def_opts -T "
  fi

  if [ $DBRM_SSL_TUN_DEF_OPTS -eq 0 ] ; then
    def_opts=""
  fi

  if [ "$reverse_flag" -eq 1 ] ; then
    opts="-R"
  else
    opts="-L"
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "(_ssl_start_tun): Tun. ${id_tunnel} cmd: ssh ${def_opts} ${opts} ${ssl_url}\n"

  # TODO: check if use nohup or other solutions.
  if [ $DBRM_SSL_USE_SSHPASS -eq 1 ] ; then
    sshpass -e ssh ${def_opts} ${opts} ${ssl_url} > /dev/null 2>&1 &
  else
    ssh ${def_opts} ${opts} ${ssl_url} > /dev/null 2>&1 &
  fi
  ssh_pid=$!

  if [ x"$?" != x"0" ] ; then
    ans=1
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "(_ssl_start_tun): Start tunnel ${id_tunnel} (ans = $ans) with pid ${ssh_pid}.\n"

  return $ans
}
#***

#****f* ssl/_ssl_clear_active_arr
# FUNCTION
#  Clear and unset ssl_active_id_tuns, ssl_active_ports, ssl_active_pids arrays variables.
# SOURCE
_ssl_clear_active_arr () {

  local i=0

  if [ "${#ssl_active_id_tuns[@]}" -gt 0 ] ; then
    for i in ${!ssl_active_id_tuns[@]} ; do
      unset ${ssl_active_id_tuns[$i]}
    done
  fi

  if [ "${#ssl_active_ports[@]}" -gt 0 ] ; then
    for i in ${!ssl_active_ports[@]} ; do
      unset ${ssl_active_ports[$i]}
    done
  fi

  if [ "${#ssl_active_pids[@]}" -gt 0 ] ; then
    for i in ${!ssl_active_pids[@]} ; do
      unset ${ssl_active_pids[$i]}
    done
  fi

  unset ssl_active_pids
  unset ssl_active_ports
  unset ssl_active_id_tuns

}
#***

#****f* ssl/_ssl_dump_active_arr
# FUNCTION
#  Debug function for print current active tunnel arrays data.
# SOURCE
_ssl_dump_active_arr () {

  local caller=$1
  local i=0
  local port=""
  local pid=""

  if [ "${#ssl_active_id_tuns[@]}" -gt 0 ] ; then

    for i in ${!ssl_active_id_tuns[@]} ; do

      port=""
      pid=""

      if [ -n "${ssl_active_ports[$i]}" ] ; then
        port=${ssl_active_ports[$i]}
      fi

      if [ -n "${ssl_active_pids[$i]}" ] ; then
        pid=${ssl_active_pids[$i]}
      fi

      echo -en "$caller Tunnel $i: port = '$port', pid = '$pid'\n"

    done

  fi

  return 0
}
#***

#****f* ssl/_ssl_read_tuns_file
# FUNCTION
#  Read ssl active tunnels file and load data to ssl_active_id_tuns,ssl_active_ports,
#  ssl_active_pids arrays.
# RETURN VALUE
#  0 on success
#  1 on error
# SOURCE
_ssl_read_tuns_file () {

  local file=$1
  local line=""
  local i=1
  local id_tunnel=""
  local port=""
  local pid=""

  if [[ -n "${file}" && -f "${file}" ]] ; then

    while read line ; do

      [[ $DEBUG && $DEBUG == true ]] && echo -en \
        "(_ssl_read_tuns_file): Line $i => $line.\n"

      id_tunnel=`echo $line | awk '{split($0,a,"|"); print a[1]}'`
      port=`echo $line | awk '{split($0,a,"|"); print a[2]}'`
      pid=`echo $line | awk '{split($0,a,"|"); print a[3]}'`

      ssl_active_id_tuns[$id_tunnel]=$id_tunnel
      ssl_active_ports[$id_tunnel]=$port
      ssl_active_pids[$id_tunnel]=$pid

      let i++

    done < <(cat $file)

    [[ $DEBUG && $DEBUG == true ]] && \
      _ssl_dump_active_arr "(_ssl_read_tuns_file): "

  else

    [[ $DEBUG && $DEBUG == true ]] && echo -en \
      "(_ssl_read_tuns_file): Active tunnel file $file doesn't exists.\n"
  fi

  return 0
}
#***

#****f* ssl/_ssl_check_port
# FUNCTION
#  Check if local port (in input) is already in binding.
# RETURN VALUE
#  0 port is free
#  1 port is busy
# SOURCE
_ssl_check_port () {

  local port="$1"
  local ans=0

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "(_ssl_check_port): netstat -aln | awk \"\$6 == \"LISTEN\" && \$4 ~ \"[.:]${port}\$\"\" | wc -l\n"

  ans=$(netstat -aln | awk "\$6 == \"LISTEN\" && \$4 ~ \"[.:]${port}\$\"" | wc -l)

  [[ $DEBUG && $DEBUG == true ]] && echo -en \
    "(_ssl_check_port): port $port is busy: $ans.\n"

  return $ans
}
#***

#****f* ssl/_ssl_check_ssl_pid
# FUNCTION
#  Check if ssh tunnel process is already active.
# RETURN VALUE
#  1 if process is active
#  0 if process is not active
# SOURCE
_ssl_check_ssl_pid () {

  local pid="$1"
  local ans=""

  ans=$(ps aux  | grep  $pid | grep "[s]sh" | wc -l)

  return $ans
}
#***


# vim: syn=sh filetype=sh ts=2 sw=2
