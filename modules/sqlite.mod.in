#!/bin/bash

name="sqlite"
sqlite_authors="Geaaru"
sqlite_creation_date="August 26, 2008"
sqlite_version="@PACKAGE_VERSION@"
sqlite_hidden="0"

#****f* sqlite/sqlite_version
# FUNCTION
#   Show version of sqlite module.
# SOURCE
sqlite_version () {
  echo -en "Version: ${sqlite_version}\n"
}
#***

#****f* sqlite/sqlite_show_help
# FUNCTION
#   Show help message.
# SOURCE
sqlite_show_help () {
   echo -en "===========================================================================\n"
   echo -en "Module [sqlite]:\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tcreate                  Create SQLite database.\n"
   echo -en "\tremove                  Remove SQLite database.\n"
   echo -en "\tquery                   Do a query to SQLite database.\n"
   echo -en "\tshell                   Enter on SQLite database shell.\n"
   echo -en "\tshow_autoincr_seq       Show list of autoincrement sequences values.\n"
   echo -en "===========================================================================\n"
}
#***

#****f* sqlite/sqlite_long_help
# FUNCTION
#   Show long help message.
# SOURCE
sqlite_long_help () {
   echo -en "===========================================================================\n"
   echo -en "Module [sqlite]:\n"
   echo -en "Author(s): ${sqlite_authors}\n"
   echo -en "Created: ${sqlite_creation_date}\n"
   echo -en "Version: ${sqlite_version}\n\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "\tlong_help               Show long help informations\n"
   echo -en "\tshow_help               Show command list.\n"
   echo -en "\tversion                 Show module version.\n"
   echo -en "\tshell                   Enter on SQLite database shell.\n"
   echo -en "\tcreate                  Create SQLite database to file:\n"
   if [[ -z "$SQLITEDB" ]] ; then
     echo -en "\t (ATTENTION: you must set SQLITEDB\n"
     echo -en "\t                        in your configuration file).\n"
   else
     echo -en "\t                        $SQLITEDB\n"
   fi
   echo -en "\tremove                  Remove SQLite database.\n"
   echo -en "\tquery                   Do a query to SQLite database.\n"
   echo -en "\tshow_autoincr_seq       Show list of autoincrement sequences values.\n"
   echo -en "---------------------------------------------------------------------------\n"
   echo -en "===========================================================================\n"

}
#***

#****f* sqlite/sqlite_show_autoincr_seq
# FUNCTION
#   Show
# RETURN VALUE
#   1   error
#   0   ok
# SOURCE
sqlite_show_autoincr_seq () {

  local query=""
  local table=""
  local sequence=""
  local counter=0

  [[ $DEBUG ]] && echo -en "(sqlite_show_autoincr_seq args: $@)\n"

  # Shift first two input param
  shift 2

  # TODO: use a dedicate check args function.
  _sqlite_check_args "$@" || error_handled ""


  query="
    SELECT COUNT(1) AS N_SEQUENCES
    FROM sqlite_sequence"

  _sqlite_query -c "$SQLITEDB" -q "$query" || error_handled "Unexpected error!"

  if [ $_sqlite_ans -eq 0 ]; then
    out_handler_print "No sequences available."
  else

    query="SELECT * FROM sqlite_sequence"

    _sqlite_query -c "$SQLITEDB" -q "$query" || error_handled "Unexpected error!"

    out_hsep=1
    out_prepost_mode="any"
    out_htabs_mode="tabs"

    out_headers[0]="TABLE"
    out_headers[1]="SEQUENCE ID"

    out_el_pre[0]="\e[1;33m"
    out_el_pre[1]="\e[1;34m"

    out_el_post[0]="\e[m"

    out_tabs[0]="20"
    out_tabs[1]="23"

    IFS=$'\n'
    for row in $_sqlite_ans ; do
      table=`echo $row | awk '{split($0,a,"|"); print a[1]}'`
      sequence=`echo $row | awk '{split($0,a,"|"); print a[2]}'`

      out_rows[$counter]="row"${counter}

      eval "row${counter}[0]=\"${table}\""
      eval "row${counter}[1]=\"${sequence}\""

      let counter++
    done
    unset IFS

    out_handler_print_arr

  fi

  out_handler_clean

  return 0
}
#***

#****f* sqlite/sqlite_create
# FUNCTION
#   Create dbrm sqlite database file.
# RETURN VALUE
#   1   error
#   0   ok
# SOURCE
sqlite_create () {
  local result=1

  [[ $DEBUG ]] && echo -en "(sqlite_create args: $@)\n"

  # Shift first two input param
  shift 2

  _sqlite_create "$@"
  result=$?

  return $result
}
#***

#****f* sqlite/sqlite_query
# FUNCTION
#   Execute a query to SQLITEDB database.
# RETURN VALUE
#   1 on error.
#   0 on success.
# RESULT
#   Answer of the query is save to _sqlite_ans variable.
# SEE ALSO
#   _sqlite_query
# SOURCE
sqlite_query () {
  local result=1

  [[ $DEBUG ]] && echo -en "(sqlite_query args: $@)\n"

  # Shift first two input param
  shift 2

  _sqlite_query "$@"
  result=$?

  return $result
}
#***

#****f* sqlite/sqlite_remove
# FUNCTION
#   Remove SQLITEDB database file.
# RETURN VALUE
#   1 on error.
#   0 on success.
# SOURCE
sqlite_remove () {
  local result=1

  [[ $DEBUG ]] && echo -en "(sqlite_remove args: $@)\n"

  # Shift first two input param
  shift 2

  _sqlite_remove "$@"
  result=$?

  return $result
}
#***

#****f* sqliet/sqlite_shell
# FUNCTION
#   Enter on database shell.
# RETURN VALUE
#   1 on error
#   0 on success.
# SEE ALSO
#   _sqlite_check_args
# SOURCE
sqlite_shell () {

  local result=1

  [[ $DEBUG ]] && echo -en "(sqlite_shell args: $@)\n"

  # Shift first two input param
  shift 2

  _sqlite_shell "$@" || error_handled "Error on enter to sqlite database file $SQLITEDB."

  return 0
}
#***

#######################################################################
# Internal Functions                                                  #
#######################################################################

#****f* sqlite/_sqlite_shell
# FUNCTION
#   Internal function for enter on sqlite database shell.
# RESULT
#   exit(1) if file doesn't exits.
# SOURCE
_sqlite_shell () {

  _sqlite_check_args "$@" || error_handled ""

  _sqlite_check_db || return 1

  sqlite3 $SQLITEDB || return 1

  return 0
}
#***

#****f* sqlite/_sqlite_check_db
# FUNCTION
#   Internal function for check if exists SQLITEDB database file.
# RESULT
#   exit(1) if file doesn't exits.
# SOURCE
_sqlite_check_db () {
  if [[ ! -e "$SQLITEDB" ]] ; then
    echo -en "$SQLITEDB database doesn't exist.\n"
    exit 1
  fi
}
#***

#****f* sqlite/_sqlite_check_args
# FUNCTION
#   Check commons arguments of the sqlite module.
# DESCRIPTION
#   Arguments of the function are:
#   -c [sqlitedb file]        To define sqlite database file.
#   -s [schema file]          Script to use on create sqlite database file.
#   -q [sql query]            Query to execute on sqlite database.
#   -t [table name]           Set table name to verify. Used only
#                             on _sqlite_exists_table function.
#   -f [sqlite file]          Script to execute on sqlite database.
# RESULT
#   Variables defined:
#     * SQLITEDB: path of sqlite database. If not set it is used value
#                 present on configuration file.
#     * SQLITE_SCHEMA: path of the sqlite file used for initialized sqlite database.
#                 For dbrm schema this parameter it is not needed. (optional)
#     * SQLITE_QUERY: variable that contains query to execute. This parameter
#                 is mandatary only for sqlite_query function.
#     * SQLITE_TABLE: contains table name to analize.
#     * SQLITE_FILE: contains script file to execute on sqlite database.
# RETURN VALUE
#   1 on error.
#   0 on success.
# SOURCE
_sqlite_check_args () {
  [[ $DEBUG ]] && echo -en "(_sqlite_check_args args: $@)\n"

  # Reinitialize opt index position
  OPTIND=1
  while getopts "c:s:q:t:f:" opts "$@" ; do
    case $opts in
      # sqlite_create params
      c) SQLITEDB="$OPTARG";;
      s) SQLITE_SCHEMA="$OPTARG";;

      # sqlite_query params
      q) SQLITE_QUERY="$OPTARG";;

      t) SQLITE_TABLE="$OPTARG";;

      f) SQLITE_FILE="$OPTARG";;

      *) ;;
    esac
  done

  if [[ -z $SQLITEDB ]] ; then
    echo -en "_sqlite_check_args: Missing sqlite database parameter.\n"
    return 1
  fi

  return 0
}
#***

#****f* sqlite/_sqlite_remove
# FUNCTION
#   Internal function for remove sqlite database file.
# RETURN VALUE
#   1 on error
#   0 on success
# SOURCE
_sqlite_remove () {
  local result=1

  _sqlite_check_args "$@" || error_handled ""

  _sqlite_check_db

  confirmation_question "Are you sure to remove file $SQLITEDB? [y/N]:"
  result=$?
  if [ $result -eq 0 ] ; then
    echo -en "Removing file $SQLITEDB..."
    $RM $SQLITEDB
    result=$?
    if [ $result -eq 0 ] ; then
      echo -en "OK\n"
    else
      echo -en "Error\n"
    fi
  else
    echo -en "Remove cancelled.\n"
  fi

  return $result
}
#***

#****f* sqlite/_sqlite_create
# FUNCTION
#   Internal function for create sqlite database file.
# SEE_ALSO
#   _sqlite_check_args for environment variables.
# RETURN VALUE
#   1 on error
#   0 on success.
# SOURCE
_sqlite_create () {
  local result=1

  _sqlite_check_args "$@"
  if [[ -z $SQLITE_SCHEMA ]] ; then
    echo -en "_sqlite_create: Missing schema file.\n"
    return 1
  fi

  if [ -e $SQLITEDB ] ; then
    echo -en "File $SQLITEDB already exist.\n"
  else
    if [ -e "$SQLITE_SCHEMA" ] ; then
      echo -en "Creating database $SQLITEDB"
      sqlite3 "$SQLITEDB" < "$SQLITE_SCHEMA"
      result=$?
      if [ $result -ne 0 ] ; then
        echo -en "Error on initialize database.\n"
      else
        echo -en "..."
      fi
      echo -en "OK\n"
    else
      echo -en "No schema file found to $SQLITE_SCHEMA\n"
      return 1
    fi
  fi

  return 0
}
#***

#****f* sqlite/_sqlite_query
# FUNCTION
#   Execute a query on sqlite database.
# DESCRIPTION
#   On execute query is add prefix command to enable foreign_keys.
#   To disable it or insert custom prefix command it is needed
#   override of SQLITEDB_INIT_SESSION variable.
#   NOTE: On execute DROP command must be set SQLITEDB_INIT_SESSION to empty string ' '.
# RETURN VALUE
#   1 on error
#   0 on success.
# RESULT
#   Query result is save to _sqlite_ans variable.
# SOURCE
_sqlite_query () {
  local result=1
  local pragma="PRAGMA foreign_keys = ON; "

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_sqlite_query: $@)\n"

  _sqlite_check_args "$@" || error_handled ""

  _sqlite_check_db || error_handled ""

  _sqlite_query_ || return 1

  return 0
}
#***

#****f* sqlite/_sqlite_query_
# FUNCTION
#   Execute a query on sqlite database without check of sqlite database, etc.
# DESCRIPTION
#   On execute query is add prefix command to enable foreign_keys.
#   To disable it or insert custom prefix command it is needed
#   override of SQLITEDB_INIT_SESSION variable.
#   NOTE: On execute DROP command must be set SQLITEDB_INIT_SESSION to empty string ' '.
# SEE ALSO
#   _sqlite_query
# RETURN VALUE
#   1 on error
#   0 on success.
# RESULT
#   Query result is save to _sqlite_ans variable.
# SOURCE
_sqlite_query_ () {
  local result=1
  local pragma="PRAGMA foreign_keys = ON; "

  if [[ ! -z "$SQLITEDB_INIT_SESSION" ]] ; then
    if [ "$SQLITEDB_INIT_SESSION" == " " ] ; then
      pragma=""
    else
      pragma="$SQLITEDB_INIT_SESSION"
    fi
  fi

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_sqlite_query_ execute: sqlite3 $SQLITEDB \"$pragma $SQLITE_QUERY\"\n"
  _sqlite_ans="$(sqlite3 $SQLITEDB "${pragma}${SQLITE_QUERY}")"
  result=$?

  [[ $DEBUG && $DEBUG == true ]] && echo -en "(_sqlite_query_ ans:\n$_sqlite_ans\n)\n"

  return $result
}
#***

#****f* sqlite/_sqlite_get_table_schema
# FUNCTION
#   Retrieve table schema and save content to $_sqlite_ans.
# RETURN VALUE
#   1 on error
#   0 on success.
# SOURCE
_sqlite_get_table_schema () {

  _sqlite_check_args "$@" || error_handled ""

  _sqlite_check_db || error_handled ""

  SQLITE_QUERY=".schema $SQLITE_TABLE"

  # Disable PRAGMA options
  SQLITEDB_INIT_SESSION=" "

  _sqlite_query_  || error_handled "Unexpected error!"

  # Re-enable PRAGMA options
  unset SQLITEDB_INIT_SESSION

  if [ x"$_sqlite_ans" == x"" ] ; then
    [[ $DEBUG && $DEBUG == true ]] && \
      echo -en "Error on retrieve schema of the table $SQLITE_TABLE.\n"
    return 1
  fi

  return 0
}
#***

#****f* sqlite/_sqlite_exists_table
# FUNCTION
#   Check if exists a table on sqlite database file.
# RETURN VALUE
#   0 if table doesn't exist.
#   1 if table exists.
# SOURCE
_sqlite_exists_table () {

  _sqlite_check_args "$@" || error_handled ""

  _sqlite_check_db || error_handled ""

  SQLITE_QUERY="
    SELECT count(1)
    FROM sqlite_master
    WHERE type='table'
    AND name='$SQLITE_TABLE'"

  _sqlite_query_ || error_handled "Unexpected error!"

  if [ x"$_sqlite_ans" == x"0" ] ; then
    return 0
  else
    return 1
  fi
}
#***

#****f* sqlite/_sqlite_compile
# FUNCTION
#   Compile imput file on sqlite database file.
# TODO
#   Check if it is correct use of error_handled function
#   or use return 1.
# RETURN VALUE
#   0 on success
#   1 on error
# SOURCE
_sqlite_compile () {

  _sqlite_check_args "$@" || error_handled ""
  _sqlite_check_db || error_handled ""

  if [ -z "$SQLITE_FILE" ] ; then
    error_handled "Missing file to compile."
  else
    if [ -e "$SQLITE_FILE" ] ; then
      error_handled "File $SQLITE_FILE not found."
    fi
  fi

  [[ $DEBUG && $DEBUG == true ]] && \
    echo -en "Compiling file ${SQLITE_FILE} on database ${SQLITEDB}..."

  sqlite3 "$SQLITEDB" < "$SQLITE_FILE"
  result=$?
  if [ $result -ne 0 ] ; then
    echo -en "Error on compile file ${SQLITE_FILE}.\n"
  fi
  [[ $DEBUG && $DEBUG == true ]] && echo -en "OK\n"

  return $result

}
#***


#****f* dbm/_dbm_get_table_schema_from_file
# FUNCTION
#  Retrieve table schema from a .sql file and save creation script
#  to $_sqlite_ans variable.
# RETURN VALUE
#   1 on error
#   0 on success.
# SOURCE
_sqlite_get_tschema_from_file () {

  local ans=0
  local schemafile="$1"
  local tname="$2"

  if [ ! -f "$schemafile" ] ; then
    error_generate "(_sqlite_get_tschema_from_file): Invalid file $schemafile." "0"
    return 1
  fi

  if [ -z "$tname" ] ; then
    error_generate "(_sqlite_get_tschema_from_file): Invalid table name $tname." ""
    return 1
  fi

  local sed_pattern="/CREATE TABLE ${tname} (.*/,/);/p"

  _sqlite_ans=$(cat $schemafile | sed -n "$sed_pattern")

  if [ $? -ne 0 ] ; then
    ans=1
  fi

  [[ $DEBUG && $DEBUG == true ]] && \
    echo -en "(_sqlite_get_tschema_from_file): For table $tname in schema $schemafile found:\n$_sqlite_ans\n"

  return $ans

}
#***


# vim: syn=sh filetype=sh ts=2 sw=2
